{
    "lightning:verticalNavigationOverflow": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            }
        ],
        "description": "Represents an overflow of items from a preceding lightning:verticalNavigationSection, with the ability to toggle visibility. This component requires API 41.0 and later."
    },
    "lightning:path": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The record's ID",
                "access": "global",
                "parent": "lightning:path"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "Changes the appearance of the path. Choose between linear and non-linear formats. In linear paths, completed steps show a checkmark. In non-linear paths, completed steps show the step name. We show linear paths by default.",
                "access": "global",
                "parent": "lightning:path"
            },
            {
                "name": "hideUpdateButton",
                "type": "boolean",
                "description": "Specified whether the Mark Complete button is displayed next to the path. If true, the button is not displayed. The Mark Complete button is displayed by default.",
                "access": "global",
                "parent": "lightning:path"
            },
            {
                "name": "onselect",
                "type": "action",
                "description": "The action triggered when a step on the path is clicked.",
                "access": "global",
                "parent": "lightning:path"
            }
        ],
        "description": "Displays a path driven by a picklist field and Path Setup metadata. This component requires API 41.0 and later."
    },
    "lightning:tabClosed": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "tabId",
                "type": "string",
                "description": "The closed tab ID.",
                "access": "global",
                "parent": "lightning:tabClosed"
            }
        ],
        "description": "Fires when a Console workspace or subtab has been successfully closed."
    },
    "lightning:map": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "zoomLevel",
                "type": "integer",
                "description": "Corresponds to zoom levels defined in Google Maps API. If not specified, the map component automatically chooses an appropriate zoom level to show all markers with comfortable margins.",
                "access": "global",
                "parent": "lightning:map"
            },
            {
                "name": "mapMarkers",
                "type": "object",
                "description": "Array containing one of more objects with the address or coordinates to be displayed.",
                "access": "global",
                "parent": "lightning:map"
            },
            {
                "name": "markersTitle",
                "type": "string",
                "description": "When the map displays multiple markers on the page and shows the list of markers, this property provides the heading title for the markers. Required if multiple markers specified.",
                "access": "global",
                "parent": "lightning:map"
            },
            {
                "name": "center",
                "type": "object",
                "description": "Centers the map according to an specific 'mapMarker' object. If not specified automatically calculates center.",
                "access": "global",
                "parent": "lightning:map"
            },
            {
                "name": "showFooter",
                "type": "boolean",
                "description": "Shows footer with 'Open in Google Maps' link. Default value: 'false'",
                "access": "global",
                "parent": "lightning:map"
            }
        ],
        "description": "A lightning:map component securely displays a map of one or more locations. This component requires API version 44.0 and later."
    },
    "aura:renderIf": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "isTrue",
                "type": "boolean",
                "description": "An expression that must evaluate to true to display the body of the component.",
                "access": "global",
                "parent": "aura:renderIf"
            },
            {
                "name": "else",
                "type": "component[]",
                "description": "The alternative content to render when isTrue evaluates to false, and the body is not rendered. Set using the <aura:set> tag.",
                "access": "global",
                "parent": "aura:renderIf"
            }
        ],
        "description": "Deprecated. Use aura:if instead. This component allows you to conditionally render its contents. It renders its body only if isTrue evaluates to true. The else attribute allows you to render an alternative when isTrue evaluates to false."
    },
    "forceChatter:fullFeed": {
        "type": "component",
        "namespace": "forceChatter",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The strategy used to find items associated with the subject. Valid values include: News, Home, Record, To.",
                "access": "global",
                "parent": "forceChatter:fullFeed"
            },
            {
                "name": "subjectId",
                "type": "string",
                "description": "For most feeds tied to an entity, this is used specified the desired entity. Defaults to the current user if not specified",
                "access": "global",
                "parent": "forceChatter:fullFeed"
            },
            {
                "name": "handleNavigationEvents",
                "type": "boolean",
                "description": "Should this component handle navigation events for entities and urls. If true then navigation events will result in the entity or url being opened in a new window.",
                "access": "global",
                "parent": "forceChatter:fullFeed"
            }
        ],
        "description": null
    },
    "lightning:button": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value for the button element. This value is optional and can be used when submitting a form.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text to be displayed inside the button.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the button. Accepted variants include base, neutral, brand, destructive, inverse and success. This value defaults to neutral.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "iconPosition",
                "type": "string",
                "description": "Describes the position of the icon with respect to body. Options include left and right. This value defaults to left.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the button is clicked.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Specifies the type of button. Valid values are button, reset, and submit. This value defaults to button.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "ariaLabel",
                "type": "string",
                "description": "Label describing the button to assistive technologies.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "ariaDescribedBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provides descriptive labels for the button.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "ariaControls",
                "type": "string",
                "description": "A space-separated list of element IDs that this button controls the contents or presence of.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "ariaExpanded",
                "type": "string",
                "description": "Indicates whether an element the button controls is expanded or collapsed. Valid values are 'true' or 'false'.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "ariaLive",
                "type": "string",
                "description": "Indicates that the button will be updated. Valid values are 'assertive', 'polite', or 'off'.",
                "access": "global",
                "parent": "lightning:button"
            },
            {
                "name": "ariaAtomic",
                "type": "string",
                "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region. Valid values are 'true' or 'false'.",
                "access": "global",
                "parent": "lightning:button"
            }
        ],
        "description": "Represents a button element."
    },
    "ui:menuItemSeparator": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            }
        ],
        "description": "A menu separator to divide menu items, such as ui:radioMenuItem, and used in a ui:menuList component."
    },
    "forceCommunity:routeChange": {
        "type": "event",
        "namespace": "forceCommunity",
        "attributes": [],
        "description": "This event is fired whenever a route url is changed"
    },
    "wave:discoverResponse": {
        "type": "event",
        "namespace": "wave",
        "attributes": [
            {
                "name": "id",
                "type": "string",
                "description": "Dashboard Id.",
                "access": "global",
                "parent": "wave:discoverResponse"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Type of component, usually dashboard.",
                "access": "global",
                "parent": "wave:discoverResponse"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Title of the dashboard.",
                "access": "global",
                "parent": "wave:discoverResponse"
            },
            {
                "name": "isLoaded",
                "type": "boolean",
                "description": "Whether dashboard is loaded or still loading.",
                "access": "global",
                "parent": "wave:discoverResponse"
            },
            {
                "name": "UID",
                "type": "string",
                "description": "Optional parameter sent with the request.",
                "access": "global",
                "parent": "wave:discoverResponse"
            }
        ],
        "description": "Response event to a wave:discover request."
    },
    "aura:valueRender": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "value",
                "type": "object",
                "description": "The component that rendered.",
                "access": "global",
                "parent": "aura:valueRender"
            }
        ],
        "description": "Indicates that a component has been rendered."
    },
    "lightning:navigation": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Generates URL for a given pageReference. This component requires API version 43.0 and later."
    },
    "lightning:openFiles": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "recordIds",
                "type": "string[]",
                "description": "IDs of the records to open. This must not be empty. ",
                "access": "global",
                "parent": "lightning:openFiles"
            },
            {
                "name": "selectedRecordId",
                "type": "string",
                "description": "ID of the record to open first among the one specified in the recordIds attribute. If this value is not provided or if the value provided is not in the list, the first element from the list will be used. ",
                "access": "global",
                "parent": "lightning:openFiles"
            }
        ],
        "description": "The lightning:openFiles event is no longer recommended. Use the Lightning navigation service instead. Application event used to open one or more file records. This event triggers a modal file previewer or download depending on the form factor. "
    },
    "forceCommunity:layout": {
        "type": "interface",
        "namespace": "forceCommunity",
        "attributes": [],
        "description": "Enables a component to be used as a custom layout for creating pages in the Community Builder"
    },
    "lightning:conversationNewMessage": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "Record ID of the conversation",
                "access": "global",
                "parent": "lightning:conversationNewMessage"
            },
            {
                "name": "content",
                "type": "string",
                "description": "The text of a message in the chat log.",
                "access": "global",
                "parent": "lightning:conversationNewMessage"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the agent who is attempting to send the message as it appears in the chat log.",
                "access": "global",
                "parent": "lightning:conversationNewMessage"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of message that was received—for example, agent.",
                "access": "global",
                "parent": "lightning:conversationNewMessage"
            },
            {
                "name": "timestamp",
                "type": "date",
                "description": "The date and time the agent attempted to send the chat message.",
                "access": "global",
                "parent": "lightning:conversationNewMessage"
            }
        ],
        "description": "Indicates receipt of a end user of a conversation"
    },
    "lightning:input": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "value",
                "type": "object",
                "description": "Specifies the value of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that an input element should be disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies that an input field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "validity",
                "type": "object",
                "description": "Represents the validity states that an element can be in, with respect to constraint validation.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a value attribute changes.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of the input. This value defaults to text.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "formatter",
                "type": "string",
                "description": "String value with the formatter to be used for number input. Valid values include decimal, percent, percent-fixed, and currency.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "files",
                "type": "object",
                "description": "A FileList that contains selected files. This attribute can be used only when type='file'.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "isLoading",
                "type": "boolean",
                "description": "Specifies whether the spinner is displayed to indicate that data is loading. This value defaults to false.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters allowed in the field.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "minlength",
                "type": "integer",
                "description": "The minimum number of characters allowed in the field.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "pattern",
                "type": "string",
                "description": "Specifies the regular expression that the input's value is checked against.                                 This attribute is supported for text, search, url, tel, email, and password types.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "max",
                "type": "object",
                "description": "The maximum acceptable value for the input. This attribute can be used only with number, range, date, time, and datetime input types. For number and range type, the max value is a decimal number. For the date, time, and datetime types, the max value must use a valid string for the type.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "min",
                "type": "object",
                "description": "The minimum acceptable value for the input. This attribute can be used only with number, range, date, time, and datetime input types. For number and range types, the min value is a decimal number. For the date, time, and datetime types, the min value must use a valid string for the type.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "step",
                "type": "object",
                "description": "Granularity of the value, specified as a positive floating point number. Use 'any' when granularity is not a concern. This value defaults to 1.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "checked",
                "type": "boolean",
                "description": "Specifies whether the checkbox is checked. This value defaults to false.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "timezone",
                "type": "string",
                "description": "Specifies the time zone used when type='datetime' only. This value defaults to the user’s Salesforce time zone setting.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "accept",
                "type": "string",
                "description": "Specifies the types of files that the server accepts. This attribute can be used only when type='file'.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "multiple",
                "type": "boolean",
                "description": "Specifies that a user can enter more than one value. This attribute can be used only when type='file' or type='email'.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenBadInput",
                "type": "string",
                "description": "Error message to be displayed when a bad input is detected.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenPatternMismatch",
                "type": "string",
                "description": "Error message to be displayed when a pattern mismatch is detected.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenTypeMismatch",
                "type": "string",
                "description": "Error message to be displayed when a type mismatch is detected.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Error message to be displayed when the value is missing.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenRangeOverflow",
                "type": "string",
                "description": "Error message to be displayed when a range overflow is detected.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenRangeUnderflow",
                "type": "string",
                "description": "Error message to be displayed when a range underflow is detected.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenStepMismatch",
                "type": "string",
                "description": "Error message to be displayed when a step mismatch is detected.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenTooLong",
                "type": "string",
                "description": "Error message to be displayed when the value is too long.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageWhenTooShort",
                "type": "string",
                "description": "Error message to be displayed when the value is too short.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageToggleActive",
                "type": "string",
                "description": "Text shown for the active state of a toggle. The default is \"Active\".",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "messageToggleInactive",
                "type": "string",
                "description": "Text shown for then inactive state of a toggle. The default is \"Inactive\".",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "ariaLabel",
                "type": "string",
                "description": "Describes the input to assistive technologies.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "ariaLabelledBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provide labels for the input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "ariaDescribedBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provide descriptive labels for the input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "ariaControls",
                "type": "string",
                "description": "A space-separated list of element IDs whose presence or content is controlled by the input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "timeAriaLabel",
                "type": "string",
                "description": "Describes the time input to assistive technologies when type=datetime. On mobile devices, this label is merged with ariaLabel and dateAriaLabel to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "timeAriaLabelledBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provide labels for the time input when type=datetime. On mobile devices, this is merged with ariaLabelledBy and dateAriaLabelledBy to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "timeAriaDescribedBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provide descriptive labels for the time input when type=datetime. On mobile devices, this is merged with ariaDescribedBy and dateAriaDescribedBy to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "timeAriaControls",
                "type": "string",
                "description": "A space-separated list of element IDs whose presence or content is controlled by the time input when type=datetime. On mobile devices, this is merged with ariaControls and dateAriaControls to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "dateAriaLabel",
                "type": "string",
                "description": "Describes the date input to assistive technologies when type=datetime. On mobile devices, this label is merged with ariaLabel and timeAriaLabel to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "dateAriaLabelledBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provide labels for the date input when type=datetime. On mobile devices, this is merged with ariaLabelledBy and timeAriaLabelledBy to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "dateAriaDescribedBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provide descriptive labels for the date input when type=datetime. On mobile devices, this is merged with ariaDescribedBy and timeAriaDescribedBy to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            },
            {
                "name": "dateAriaControls",
                "type": "string",
                "description": "A space-separated list of element IDs whose presence or content is controlled by the date input when type=datetime. On mobile devices, this is merged with ariaControls and timeAriaControls to describe the native date time input.",
                "access": "global",
                "parent": "lightning:input"
            }
        ],
        "description": "Represents interactive controls that accept user input depending on the type attribute."
    },
    "lightning:checkboxGroup": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the checkbox group receives focus.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the checkbox group releases focus.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the checkbox group.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the checkbox group.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "options",
                "type": "list",
                "description": "Array of label-value pairs for each checkbox.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "value",
                "type": "string[]",
                "description": "The list of selected checkboxes. Each array entry contains the value of a selected checkbox. The value of each checkbox is set in the options attribute.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Optional message displayed when no checkbox is selected and the required attribute is set to true.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Set to true if at least one checkbox must be selected. This value defaults to false.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Set to true if the checkbox group is disabled. Checkbox selections can't be changed for a disabled checkbox group. This value defaults to false.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a checkbox value changes.",
                "access": "global",
                "parent": "lightning:checkboxGroup"
            }
        ],
        "description": "A checkbox group that enables selection of single or multiple options. This component requires API version 41.0 and later."
    },
    "lightning:conversationToolkitAPI": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Console integration APIs for Live Agent."
    },
    "lightning:carousel": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "scrollDuration",
                "type": "integer",
                "description": "The auto scroll duration. The default is 5 seconds, after that the next image is displayed.",
                "access": "global",
                "parent": "lightning:carousel"
            },
            {
                "name": "disableAutoScroll",
                "type": "boolean",
                "description": "Specifies whether auto scroll is disabled. The default value is false.",
                "access": "global",
                "parent": "lightning:carousel"
            },
            {
                "name": "disableAutoRefresh",
                "type": "boolean",
                "description": "Specifies whether the carousel should stop looping from the beginning after the last item is displayed. The default value is false.",
                "access": "global",
                "parent": "lightning:carousel"
            }
        ],
        "description": "A collection of images that are displayed one at a time."
    },
    "aura:html": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component.  In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:html"
            },
            {
                "name": "tag",
                "type": "string",
                "description": "The name of the html element that should be rendered.",
                "access": "global",
                "parent": "aura:html"
            },
            {
                "name": "HTMLAttributes",
                "type": "map",
                "description": "A Map of attributes to set on the html element.",
                "access": "global",
                "parent": "aura:html"
            }
        ],
        "description": "A meta component that represents all html elements.  Any html found in your markup causes the creation of one of these."
    },
    "lightning:dualListbox": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "value",
                "type": "object",
                "description": "Specifies the value of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that an input element should be disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies that an input field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "validity",
                "type": "object",
                "description": "Represents the validity states that an element can be in, with respect to constraint validation.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a value attribute changes.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Label for the dual listbox.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "sourceLabel",
                "type": "string",
                "description": "Label for source options listbox.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "selectedLabel",
                "type": "string",
                "description": "Label for selected options listbox.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "options",
                "type": "object[]",
                "description": "A list of options that are available for selection. Each option has the following attributes: label and value.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "downButtonLabel",
                "type": "string",
                "description": "Label for down button.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "removeButtonLabel",
                "type": "string",
                "description": "Label for remove button.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "addButtonLabel",
                "type": "string",
                "description": "Label for add button.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "upButtonLabel",
                "type": "string",
                "description": "Label for up button.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "requiredOptions",
                "type": "list",
                "description": "A list of required options that cannot be removed from selected options listbox. This list is populated with values from options attribute.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "values",
                "type": "list",
                "description": "A list of default options that are included in the selected options listbox. This list is populated with values from the options attribute.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "fieldLevelHelp",
                "type": "string",
                "description": "Help text detailing the purpose and function of name compound field.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "min",
                "type": "integer",
                "description": "Minimum number of options required in the selected options listbox.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "max",
                "type": "integer",
                "description": "Maximum number of options required in the selected options listbox.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "disableReordering",
                "type": "boolean",
                "description": "Set to true to hide the Up and Down buttons used for reordering the Selected list items.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "Number of items that display before vertical scrollbars are displayed for the listboxes. Determines the vertical size of the dual listbox.",
                "access": "global",
                "parent": "lightning:dualListbox"
            },
            {
                "name": "showActivityIndicator",
                "type": "boolean",
                "description": "Displays a spinner to indicate activity in the listbox. This value defaults to false.",
                "access": "global",
                "parent": "lightning:dualListbox"
            }
        ],
        "description": "A widget that provides an input listbox, accompanied with a listbox of selectable options. Order of selected options is saved. This component requires API version 41.0 and later."
    },
    "force:showToast": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "title",
                "type": "string",
                "description": "Specifies the title for a message to display. The title is shown above the message in a slightly larger font.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "duration",
                "type": "integer",
                "description": "Length of time the toast is visible for, in milliseconds. Applies to 'dismissible' or 'pester' toast modes. The default is 5000ms if the provided value is less than 5000ms.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "message",
                "type": "string",
                "description": "The message to display in the toast.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "key",
                "type": "string",
                "description": "Icon to use when toast type is 'other'. Icon keys are available at the Lightning Design System Icons page.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "mode",
                "type": "string",
                "description": "The toast mode, which controls how users can dismiss the toast. Valid values are 'pester' and 'sticky'. The default is 'dismissible', which displays the close button.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The toast type, which can be 'error', 'warning', 'success', or 'info'. The default is 'other', which is styled like an 'info' toast and doesn’t display an icon, unless specified by the key attribute.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "messageTemplate",
                "type": "string",
                "description": "Overwrites message string with the specified message. Requires messageTemplateData.",
                "access": "global",
                "parent": "force:showToast"
            },
            {
                "name": "messageTemplateData",
                "type": "object[]",
                "description": "An array of text and actions to be used in messageTemplate.",
                "access": "global",
                "parent": "force:showToast"
            }
        ],
        "description": "Displays page-level toasts."
    },
    "lightning:omniChannelWorkAssigned": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "workItemId",
                "type": "string",
                "description": "The ID of the object that’s routed through Omni-Channel.",
                "access": "global",
                "parent": "lightning:omniChannelWorkAssigned"
            },
            {
                "name": "workId",
                "type": "string",
                "description": "The ID of a work assignment that’s routed to an agent.",
                "access": "global",
                "parent": "lightning:omniChannelWorkAssigned"
            }
        ],
        "description": "Fired when a user is assigned a new work item."
    },
    "lightning:treeGrid": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "columns",
                "type": "list",
                "description": "Array of the columns object that's used to define the data types. Required properties include 'label', 'dataKey', and 'type'. The default type is 'text'.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "data",
                "type": "object",
                "description": "The array of data to be displayed.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "expandedRows",
                "type": "list",
                "description": "The array of unique row IDs that are expanded.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "selectedRows",
                "type": "list",
                "description": "The array of unique row IDs that are selected.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "keyField",
                "type": "string",
                "description": "Required for better performance. Associates each row with a unique ID.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "hideCheckboxColumn",
                "type": "boolean",
                "description": "Hides or displays the checkbox column for row selection. To hide the checkbox column, set hideCheckboxColumn to true. The default is false.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "isLoading",
                "type": "boolean",
                "description": "Specifies whether more data is being loaded and displays a spinner if so. The default is false.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "resizeColumnDisabled",
                "type": "boolean",
                "description": "Specifies whether column resizing is disabled. The default is false.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "minColumnWidth",
                "type": "integer",
                "description": "The minimum width for all columns. The default is 50px.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "maxColumnWidth",
                "type": "integer",
                "description": "The maximum width for all columns. The default is 1000px.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "onrowselection",
                "type": "action",
                "description": "The action triggered when a row is selected.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "onrowaction",
                "type": "action",
                "description": "The action triggered when an operation its clicked. By default its to closes the actions menu.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "onresize",
                "type": "action",
                "description": "The action triggered when the table renders columns the first time and every time its resized an specific column.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "ontoggle",
                "type": "action",
                "description": "The action triggered when a row is toggled (expanded or collapsed).",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "ontoggleall",
                "type": "action",
                "description": "The action triggered when all rows are toggled (expanded or collapsed).",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "showRowNumberColumn",
                "type": "boolean",
                "description": "Hides or displays the row number column. To show the row number column, set showRowNumberColumn to true. The default is false.",
                "access": "global",
                "parent": "lightning:treeGrid"
            },
            {
                "name": "rowNumberOffset",
                "type": "integer",
                "description": "Determines where to start counting the row number. The default is 0.",
                "access": "global",
                "parent": "lightning:treeGrid"
            }
        ],
        "description": "Displays a hierarchical view of data in a table. This component requires API version 42.0 and later."
    },
    "lightningsnapin:prechatUI": {
        "type": "interface",
        "namespace": "lightningsnapin",
        "attributes": [],
        "description": "This marker interface is used to indicate that a component can be used with Snap-Ins Pre-Chat."
    },
    "force:navigateToList": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "listViewId",
                "type": "string",
                "description": "The ID of the list view to be displayed",
                "access": "global",
                "parent": "force:navigateToList"
            },
            {
                "name": "listViewName",
                "type": "string",
                "description": "Specifies the name for the list view and doesn't need to match the actual name. To use the actual name that's saved for the list view, set listViewName to null.",
                "access": "global",
                "parent": "force:navigateToList"
            },
            {
                "name": "scope",
                "type": "string",
                "description": "The name of the sObject in the view, for example, 'Account' or 'MyObject__c'",
                "access": "global",
                "parent": "force:navigateToList"
            }
        ],
        "description": "Navigates to the list view specified by listViewId."
    },
    "lightning:layoutItem": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "If the viewport is divided into 12 parts, size indicates the relative space the container occupies. Size is expressed as an integer from 1 through 12. This applies for all device-types.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "smallDeviceSize",
                "type": "integer",
                "description": "If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than mobile. It is expressed as an integer from 1 through 12.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "mediumDeviceSize",
                "type": "integer",
                "description": "If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than tablet. It is expressed as an integer from 1 through 12.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "largeDeviceSize",
                "type": "integer",
                "description": "If the viewport is divided into 12 parts, this attribute indicates the relative space the container occupies on device-types larger than desktop. It is expressed as an integer from 1 through 12.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "flexibility",
                "type": "object",
                "description": "Make the item fluid so that it absorbs any extra space in its container or shrinks when there is less space. Allowed values are: auto (columns grow or shrink equally as space allows), shrink (columns shrink equally as space decreases), no-shrink (columns don't shrink as space reduces), grow (columns grow equally as space increases), no-grow (columns don't grow as space increases), no-flex (columns don't grow or shrink as space changes). Use a comma-separated value for multiple options, such as 'auto, no-shrink'.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "padding",
                "type": "string",
                "description": "Sets padding to either the right and left sides of a container, or all sides of a container. Allowed values are horizontal-small, horizontal-medium, horizontal-large, around-small, around-medium, around-large.",
                "access": "global",
                "parent": "lightning:layoutItem"
            },
            {
                "name": "alignmentBump",
                "type": "string",
                "description": "Specifies a direction to bump the alignment of adjacent layout items. Allowed values are left, top, right, bottom.",
                "access": "global",
                "parent": "lightning:layoutItem"
            }
        ],
        "description": "The basic element of lightning:layout."
    },
    "wave:discover": {
        "type": "event",
        "namespace": "wave",
        "attributes": [
            {
                "name": "UID",
                "type": "string",
                "description": "Optional identifier that will be included in the response data.",
                "access": "global",
                "parent": "wave:discover"
            }
        ],
        "description": "Wave event that wave dashboard listens and responds to with a discoverResponse event."
    },
    "aura:waiting": {
        "type": "event",
        "namespace": "aura",
        "attributes": [],
        "description": "Indicates that the client-side framework is currently awaiting a response to a server request."
    },
    "forceCommunity:notifications": {
        "type": "component",
        "namespace": "forceCommunity",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Notifications lets your members receive notifications wherever they are working, whether in their communities or in their apps. Members receive notifications on any screen—mobile, tablet, and desktop. All events that trigger notifications (@mentions and group posts) are supported. When a member clicks a notification, the originating detail page or other appropriate location is displayed for seamless collaboration across communities and apps."
    },
    "lightningsnapin:minimizedAPI": {
        "type": "component",
        "namespace": "lightningsnapin",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Enables you to customize your user interface for the minimized snap-in in Snap-ins for web."
    },
    "force:navigateToURL": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "networkId",
                "type": "string",
                "description": "Network that the event is associated with.",
                "access": "global",
                "parent": "force:isNetwork"
            },
            {
                "name": "isredirect",
                "type": "boolean",
                "description": "If we are redirecting in place, we don't want to create 2 history entries for hybrid. Instead hybrid ignores redirects as a history entry.",
                "access": "global",
                "parent": "force:navigateToURL"
            },
            {
                "name": "url",
                "type": "string",
                "description": "The URL of the target",
                "access": "global",
                "parent": "force:navigateToURL"
            }
        ],
        "description": "Navigates to the specified URL."
    },
    "lightning:avatar": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the shape of the avatar. Valid values are empty, circle, and square. This value defaults to square.",
                "access": "global",
                "parent": "lightning:avatar"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size of the avatar. Valid values are x-small, small, medium, and large. This value defaults to medium.",
                "access": "global",
                "parent": "lightning:avatar"
            },
            {
                "name": "src",
                "type": "string",
                "description": "The URL for the image.",
                "access": "global",
                "parent": "lightning:avatar"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The alternative text used to describe the avatar, which is displayed as hover text on the image.",
                "access": "global",
                "parent": "lightning:avatar"
            },
            {
                "name": "fallbackIconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon used as a fallback when the image fails to load. The initials fallback relies on this for its background color. Names are written in the format 'standard:account' where 'standard' is the category, and 'account' is the specific icon to be displayed. Only icons from the standard and custom categories are allowed.",
                "access": "global",
                "parent": "lightning:avatar"
            },
            {
                "name": "initials",
                "type": "string",
                "description": "If the record name contains two words, like first and last name, use the first capitalized letter of each. For records that only have a single word name, use the first two letters of that word using one capital and one lower case letter.",
                "access": "global",
                "parent": "lightning:avatar"
            }
        ],
        "description": "A visual representation of an object."
    },
    "force:navigateHome": {
        "type": "event",
        "namespace": "force",
        "attributes": [],
        "description": null
    },
    "lightning:layout": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "Body of the layout component.",
                "access": "global",
                "parent": "lightning:layout"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "horizontalAlign",
                "type": "string",
                "description": "Determines how to spread the layout items horizontally. The alignment options are center, space, spread, and end.",
                "access": "global",
                "parent": "lightning:layout"
            },
            {
                "name": "verticalAlign",
                "type": "string",
                "description": "Determines how to spread the layout items vertically. The alignment options are start, center, end, and stretch.",
                "access": "global",
                "parent": "lightning:layout"
            },
            {
                "name": "multipleRows",
                "type": "boolean",
                "description": "Determines whether to wrap the child items when they exceed the layout width. If true, the items wrap to the following line. This value defaults to false.",
                "access": "global",
                "parent": "lightning:layout"
            },
            {
                "name": "pullToBoundary",
                "type": "string",
                "description": "Pulls layout items to the layout boundaries and corresponds to the padding size on the layout item. Possible values are small, medium, or large.",
                "access": "global",
                "parent": "lightning:layout"
            }
        ],
        "description": "Represents a responsive grid system for arranging containers on a page."
    },
    "forceCommunity:waveDashboard": {
        "type": "component",
        "namespace": "forceCommunity",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "Id of the current entity in the context of which the component is being displayed.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "dashboardId",
                "type": "string",
                "description": "The unique ID of the dashboard. You can get a dashboard’s ID, an 18-character code beginning with 0FK, from the dashboard's URL, or you can request it through the API. This attribute can be used instead of the developer name, but it can't be included if the name has been set. One of the two is required.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "developerName",
                "type": "string",
                "description": "The unique developer name of the dashboard. You can request the developer name through the API. This attribute can be used instead of the dashboard ID, but it can't be included if the ID has been set. One of the two is required.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "hideOnError",
                "type": "boolean",
                "description": "Controls whether or not users see a dashboard that has an error. When this attribute is set to true, if the dashboard has an error, it won’t appear on the page. When set to false, the dashboard appears but doesn’t show any data. An error can occur when a user doesn't have access to the dashboard or it has been deleted. ",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "height",
                "type": "integer",
                "description": "Specifies the height of the dashboard, in pixels.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "showSharing",
                "type": "boolean",
                "description": "If true, and the dashboard is shareable, then the dashboard shows the Share icon. If false, the dashboard doesn't show the Share icon. To show the Share icon in the dashboard, the smallest supported frame size is 800 x 612 pixels.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "showTitle",
                "type": "boolean",
                "description": "If true, the dashboard’s title is included above the dashboard. If false, the dashboard appears without a title.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "showHeader",
                "type": "boolean",
                "description": "If true, the dashboard is displayed with a header bar that includes dashboard information and controls. If false, the dashboard appears without a header bar. Note that the header bar automatically appears when either showSharing or showTitle is true.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "rendered",
                "type": "boolean",
                "description": "Specifies whether or not the component is rendered on the page.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "filter",
                "type": "string",
                "description": "Adds selections or filters to the embedded dashboard at runtime. The filter attribute is configured using JSON. For filtering by dimension, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': ['$value3', '$value4']}}]}}. For filtering on measures, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': [[$value3]]}}]}}. With the selection option, the dashboard is shown with all its data, and the specified dimension values are highlighted. With the filter option, the dashboard is shown with only filtered data. For more information, see https://help.salesforce.com/articleView?id=bi_embed_community_builder.htm. ",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "openLinksInNewWindow",
                "type": "boolean",
                "description": "If false, links to other dashboards will be opened in the same window.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            },
            {
                "name": "accessToken",
                "type": "string",
                "description": "A valid access token obtained by logging into Salesforce. Useful when the component is used by Lightning Out in a non-Salesforce domain.",
                "access": "global",
                "parent": "forceCommunity:waveDashboard"
            }
        ],
        "description": "Use this component to add a Salesforce Analytics dashboard to a Community page."
    },
    "ui:outputCheckbox": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "boolean",
                "description": "Specifies whether the checkbox is checked.",
                "access": "global",
                "parent": "ui:outputCheckbox"
            },
            {
                "name": "altChecked",
                "type": "string",
                "description": "The alternate text description when the checkbox is checked. Default value is “True”.",
                "access": "global",
                "parent": "ui:outputCheckbox"
            },
            {
                "name": "altUnchecked",
                "type": "string",
                "description": "The alternate text description when the checkbox is unchecked. Default value is “False”.",
                "access": "global",
                "parent": "ui:outputCheckbox"
            }
        ],
        "description": "Displays a checkbox in a checked or unchecked state."
    },
    "lightning:utilityItem": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "supportsPopOut",
                "type": "boolean",
                "description": "Controls the availability of pop-out functionality.  Set to false to remove the pop-out option for the utility item.",
                "access": "global",
                "parent": "lightning:utilityItem"
            }
        ],
        "description": "This interface is used to denote that a component can be included in the utility bar."
    },
    "aura:component": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "The root of the component hierarchy. Provides a default rendering implementation."
    },
    "ui:outputRichText": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The formatted text used for output.",
                "access": "global",
                "parent": "ui:outputRichText"
            },
            {
                "name": "linkify",
                "type": "boolean",
                "description": "Indicates if the URLs in the text are set to render as hyperlinks.",
                "access": "global",
                "parent": "ui:outputRichText"
            }
        ],
        "description": "Displays formatted text including tags such as paragraph, image, and hyperlink, as specified in the value attribute."
    },
    "ui:actionMenuItem": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "selected",
                "type": "boolean",
                "description": "The status of the menu item. True means this menu item is selected; False is not selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "hideMenuAfterSelected",
                "type": "boolean",
                "description": "Set to true to hide menu after the menu item is selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:menuItem"
            }
        ],
        "description": "A menu item that triggers an action. This component is nested in a ui:menu component."
    },
    "lightning:omniToolkitAPI": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "This component provides access to the API for the Omni-channel toolkit."
    },
    "wave:pageChange": {
        "type": "event",
        "namespace": "wave",
        "attributes": [
            {
                "name": "pageid",
                "type": "string",
                "description": "The dashboard page that should be displayed if value is supplied.",
                "access": "global",
                "parent": "wave:pageChange"
            },
            {
                "name": "devName",
                "type": "string",
                "description": "The dev name for the Wave Asset.",
                "access": "global",
                "parent": "wave:pageChange"
            }
        ],
        "description": "Event that updates the dashboard with the specified pageid."
    },
    "lightning:tab": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "componentdefref[]",
                "description": "The body of the tab.",
                "access": "global",
                "parent": "lightning:tab"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "id",
                "type": "string",
                "description": "The optional ID is used during tabset's onselect event to determine which tab was clicked.",
                "access": "global",
                "parent": "lightning:tab"
            },
            {
                "name": "label",
                "type": "component[]",
                "description": "The text that appears on the tab. The attribute accepts string values, but for compatibility with previous releases also accepts a component type. Only the text portion of the label value displays and any CSS classes that are applied are ignored.",
                "access": "global",
                "parent": "lightning:tab"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of an icon to display to the left of the tab label. Specify the name in the format 'utility:down' where 'utility' is the category, and 'down' is the icon to be displayed. Only utility icons can be used in this component.",
                "access": "global",
                "parent": "lightning:tab"
            },
            {
                "name": "iconAssistiveText",
                "type": "string",
                "description": "Assistive text for the icon specified by iconName.",
                "access": "global",
                "parent": "lightning:tab"
            },
            {
                "name": "showErrorIndicator",
                "type": "boolean",
                "description": "Specifies whether there's an error in the tab content. An error icon is displayed to the right of the tab label.",
                "access": "global",
                "parent": "lightning:tab"
            },
            {
                "name": "onactive",
                "type": "action",
                "description": "The action triggered when this tab becomes active.",
                "access": "global",
                "parent": "lightning:tab"
            }
        ],
        "description": "A single tab that is nested in a lightning:tabset component."
    },
    "forceChatter:publisher": {
        "type": "component",
        "namespace": "forceChatter",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The record Id",
                "access": "global",
                "parent": "force:hasRecordId"
            },
            {
                "name": "context",
                "type": "string",
                "description": "The context in which the component is being displayed (RECORD or GLOBAL). RECORD is for a record feed, and GLOBAL is for all other feed types. This attribute is case-sensitive.",
                "access": "global",
                "parent": "forceChatter:publisher"
            }
        ],
        "description": "Lets users create posts on records or groups and upload attachments from their desktops in Lightning Experience and communities and from their mobile devices in communities. Note that this component is not available to mobile devices in Lightning Experience."
    },
    "ui:inputCheckbox": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "value",
                "type": "boolean",
                "description": "Indicates whether the status of the option is selected. Default value is “false”.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change,click\".",
                "access": "global",
                "parent": "ui:inputCheckbox"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "text",
                "type": "string",
                "description": "The input value attribute.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            }
        ],
        "description": "Represents a checkbox. Its behavior can be configured using events such as click and change."
    },
    "ui:inputCurrency": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "decimal",
                "description": "The input value of the number.",
                "access": "global",
                "parent": "ui:inputNumberComponent"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.",
                "access": "global",
                "parent": "ui:inputNumberComponent"
            }
        ],
        "description": "An input field for entering a currency."
    },
    "ui:inputEmail": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            }
        ],
        "description": "Represents an input field for entering an email address."
    },
    "lightning:verticalNavigationSection": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The heading text for this section.",
                "access": "global",
                "parent": "lightning:verticalNavigationSection"
            }
        ],
        "description": "Represents a section within a lightning:verticalNavigation. This component requires API version 41.0 and later."
    },
    "lightning:inputLocation": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "latitude",
                "type": "string",
                "description": "The latitude value. Latitude values must be within -90 and 90.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "longitude",
                "type": "string",
                "description": "The longitude value. Longitude values must be within -180 and 180.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the compound field must be filled out. An error message is displayed if a user interacts with the field and does not provide a value. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the compound field should be disabled. Disabled fields are grayed out and not clickable. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies whether the compound field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "fieldLevelHelp",
                "type": "string",
                "description": "Help text detailing the purpose and function of location compound field.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the input location field.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the input releases focus.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when the value changes.",
                "access": "global",
                "parent": "lightning:inputLocation"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the input receives focus.",
                "access": "global",
                "parent": "lightning:inputLocation"
            }
        ],
        "description": "Represents a geolocation compound field that accepts a latitude and longitude value. This component requires API version 41.0 and later."
    },
    "lightning:buttonIcon": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value for the button element. This value is optional and can be used when submitting a form.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Only utility icons can be used in this component.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "iconClass",
                "type": "string",
                "description": "The class to be applied to the contained icon element.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of buttonIcon. Accepted variants include bare,         container, brand, border, border-filled, bare-inverse, and border-inverse. This value defaults to border.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size of the buttonIcon. For the bare variant, options include x-small, small, medium, and large. For non-bare variants, options include xx-small, x-small, small, and medium. This value defaults to medium.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action that will be run when the button is clicked.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Specifies the type of button. Valid values are button, reset, and submit. This value defaults to button.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "ariaLabel",
                "type": "string",
                "description": "Label describing the button to assistive technologies.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "ariaDescribedBy",
                "type": "string",
                "description": "A space-separated list of element IDs that provides descriptive labels for the button.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "ariaControls",
                "type": "string",
                "description": "A space-separated list of element IDs that this button controls the contents or presence of.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "ariaExpanded",
                "type": "string",
                "description": "Indicates whether an element the button controls is expanded or collapsed. Valid values are 'true' or 'false'.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "ariaLive",
                "type": "string",
                "description": "Indicates that the button will be updated. Valid values are 'assertive', 'polite', or 'off'.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            },
            {
                "name": "ariaAtomic",
                "type": "string",
                "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region. Valid values are 'true' or 'false'.",
                "access": "global",
                "parent": "lightning:buttonIcon"
            }
        ],
        "description": "An icon-only HTML button."
    },
    "lightning:formattedAddress": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "street",
                "type": "string",
                "description": "The street detail for the address.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "city",
                "type": "string",
                "description": "The city detail for the address.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "province",
                "type": "string",
                "description": "The province detail for the address.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "country",
                "type": "string",
                "description": "The country detail for the address.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "postalCode",
                "type": "string",
                "description": "The postal code detail for the address.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "latitude",
                "type": "decimal",
                "description": "The latitude of the location if known. Latitude values must be within -90 and 90.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "longitude",
                "type": "decimal",
                "description": "The longitude of the location if known. Longitude values must be within -180 and 180.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the address is clickable. This value defaults to false.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            },
            {
                "name": "showStaticMap",
                "type": "boolean",
                "description": "Displays a static map of the location using Google Maps. This value defaults to false.",
                "access": "global",
                "parent": "lightning:formattedAddress"
            }
        ],
        "description": "Displays a formatted address that provides a link to the given location on Google Maps. This component requires API version 42.0 and later."
    },
    "lightning:homeTemplate": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [],
        "description": "Indicates the component can be used as a flexipage page template for the HOME_PAGE page type"
    },
    "lightning:tabUpdated": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "tabId",
                "type": "string",
                "description": "The ID of the tab that was updated.",
                "access": "global",
                "parent": "lightning:tabUpdated"
            }
        ],
        "description": "Fires when a Console workspace or subtab has been updated. This may include label, icon, and/or content changes."
    },
    "lightning:omniChannelWorkDeclined": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "workItemId",
                "type": "string",
                "description": "The ID of the object that’s routed through Omni-Channel.",
                "access": "global",
                "parent": "lightning:omniChannelWorkDeclined"
            },
            {
                "name": "workId",
                "type": "string",
                "description": "The ID of a work assignment that’s routed to an agent.",
                "access": "global",
                "parent": "lightning:omniChannelWorkDeclined"
            }
        ],
        "description": "Fired when a user declines a work assignment."
    },
    "force:navigateToObjectHome": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "scope",
                "type": "string",
                "description": "name or key prefix of entity to display object home for.",
                "access": "global",
                "parent": "force:navigateToObjectHome"
            },
            {
                "name": "resetHistory",
                "type": "boolean",
                "description": "Set to true to reset history",
                "access": "global",
                "parent": "force:navigateToObjectHome"
            }
        ],
        "description": "used to navigate to object home"
    },
    "lightning:badge": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text to be displayed inside the badge.",
                "access": "global",
                "parent": "lightning:badge"
            }
        ],
        "description": "Represents a label which holds a small amount of information, such as the number of unread notifications."
    },
    "lightningsnapin:prechatAPI": {
        "type": "component",
        "namespace": "lightningsnapin",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Enables customization of the user interface for the pre-chat page in Snap-ins Chat. Your custom pre-chat component must implement the lightningsnapin:prechatUI interface."
    },
    "ui:outputDateTime": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "An ISO8601-formatted string representing a date time.",
                "access": "global",
                "parent": "ui:outputDateTime"
            },
            {
                "name": "format",
                "type": "string",
                "description": "A string (pattern letters are defined in java.text.SimpleDateFormat) used to format the date and time of the value attribute.",
                "access": "global",
                "parent": "ui:outputDateComponent"
            },
            {
                "name": "langLocale",
                "type": "string",
                "description": "Deprecated. The language locale used to format date value. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
                "access": "global",
                "parent": "ui:outputDateComponent"
            },
            {
                "name": "timezone",
                "type": "string",
                "description": "The timezone ID, for example, America/Los_Angeles.",
                "access": "global",
                "parent": "ui:outputDateTime"
            }
        ],
        "description": "Displays a date, time in a specified or default format based on the user's locale."
    },
    "ui:inputNumber": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "decimal",
                "description": "The input value of the number.",
                "access": "global",
                "parent": "ui:inputNumberComponent"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.",
                "access": "global",
                "parent": "ui:inputNumberComponent"
            }
        ],
        "description": "An input field for entering a number, taking advantage of client input assistance and validation when available."
    },
    "lightning:verticalNavigationItemBadge": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed for this navigation item.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemBadge"
            },
            {
                "name": "name",
                "type": "string",
                "description": "A unique identifier for this navigation item.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemBadge"
            },
            {
                "name": "href",
                "type": "string",
                "description": "The URL of the page that the navigation item goes to.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemBadge"
            },
            {
                "name": "badgeCount",
                "type": "integer",
                "description": "The number to show inside the badge. If this value is zero the badge will be hidden.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemBadge"
            },
            {
                "name": "assistiveText",
                "type": "string",
                "description": "Assistive text describing the number in the badge. This is used to enhance accessibility and is not displayed to the user.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemBadge"
            }
        ],
        "description": "A link and badge within a lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later."
    },
    "forceCommunity:profileMenuInterface": {
        "type": "interface",
        "namespace": "forceCommunity",
        "attributes": [],
        "description": "Enables a component to be used as a custom profile menu in Community Builder."
    },
    "ui:button": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "buttonTitle",
                "type": "string",
                "description": "The text displayed in a tooltip when the mouse pointer hovers over the button.",
                "access": "global",
                "parent": "ui:button"
            },
            {
                "name": "buttonType",
                "type": "string",
                "description": "Specifies the type of button. Possible values: reset, submit, or button. This value defaults to button.",
                "access": "global",
                "parent": "ui:button"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the button. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:button"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the button. Corresponds to the value attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:button"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "A CSS style to be attached to the label. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:button"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. Default value is \"false\".",
                "access": "global",
                "parent": "ui:button"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "The keyboard access key that puts the button in focus. When the button is in focus, pressing Enter clicks the button.",
                "access": "global",
                "parent": "ui:button"
            }
        ],
        "description": "Represents a button element."
    },
    "clients:hasEventContext": {
        "type": "interface",
        "namespace": "clients",
        "attributes": [
            {
                "name": "dates",
                "type": "object",
                "description": "READONLY - An object representing the item context pertinent to the appointment.",
                "access": "global",
                "parent": "clients:hasEventContext"
            },
            {
                "name": "location",
                "type": "string",
                "description": "READONLY - The location of the current event.",
                "access": "global",
                "parent": "clients:hasEventContext"
            }
        ],
        "description": "Context for event information. Use this interface to interact with the mail clients."
    },
    "ui:inputSecret": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            }
        ],
        "description": "An input field for entering secret text with type password."
    },
    "forceCommunity:searchInterface": {
        "type": "interface",
        "namespace": "forceCommunity",
        "attributes": [],
        "description": "Enables a components to be used as a custom search component in the Community Builder."
    },
    "forceCommunity:themeLayout": {
        "type": "interface",
        "namespace": "forceCommunity",
        "attributes": [],
        "description": "Represent the layout for a theme and hosted inside the Community Builder"
    },
    "lightning:empApi": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Exposes the EmpJs Streaming API library which subscribes to a streaming channel and listens to event messages using a shared CometD connection. This component is supported only in desktop browsers. This component requires API version 44.0 and later."
    },
    "ui:outputNumber": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "decimal",
                "description": "The number displayed when this component is rendered.",
                "access": "global",
                "parent": "ui:outputNumber"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used.",
                "access": "global",
                "parent": "ui:outputNumber"
            }
        ],
        "description": "Displays the number in the default or specified format. Supports up to 18 digits before the decimal place."
    },
    "lightning:backgroundUtilityItem": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [],
        "description": "This interface is used to indicate that the component is available to be instantiated at the app level without rendering any UI."
    },
    "lightning:clickToDial": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The phone number.",
                "access": "global",
                "parent": "lightning:clickToDial"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The Salesforce record Id that's associated with the phone number.",
                "access": "global",
                "parent": "lightning:clickToDial"
            },
            {
                "name": "params",
                "type": "string",
                "description": "Comma-separated list of parameters to pass to the third-party phone system.",
                "access": "global",
                "parent": "lightning:clickToDial"
            }
        ],
        "description": "Renders a formatted phone number as click-to-dial enabled or disabled for Open CTI and Voice. This component requires API version 41.0 and later."
    },
    "lightning:formattedTime": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The time value to format.",
                "access": "global",
                "parent": "lightning:formattedTime"
            }
        ],
        "description": "Displays a formatted time in user's locale format. This component requires API version 42.0 and later."
    },
    "ltng:beforeLoadingResources": {
        "type": "event",
        "namespace": "ltng",
        "attributes": [],
        "description": "Fired before ltng:require attempts to load any requested resources"
    },
    "lightning:navigationItemAPI": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "This component allows you to access methods for programmatically controlling navigation items in Lightning console apps, where navigation items display in an item menu. This component requires API version 43.0 and later."
    },
    "force:closeQuickAction": {
        "type": "event",
        "namespace": "force",
        "attributes": [],
        "description": "Closes a quick action panel. Only one quick action panel can be open in the app at a time."
    },
    "lightningsnapin:settingsAPI": {
        "type": "component",
        "namespace": "lightningsnapin",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Enables you to fetch certain settings from within your custom components for Snap-ins for web."
    },
    "aura:template": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "title",
                "type": "string",
                "description": "The title of the template.",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "auraPreInitBlock",
                "type": "component[]",
                "description": "The block of content that is rendered before Aura initialization.",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "doctype",
                "type": "string",
                "description": "The DOCTYPE declaration for the template.",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "loadingText",
                "type": "string",
                "description": "Loading text",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "errorTitle",
                "type": "string",
                "description": "Error title when an error has occured.",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "errorMessage",
                "type": "string",
                "description": "Error loading text",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "defaultBodyClass",
                "type": "string",
                "description": "Default body CSS styles.",
                "access": "global",
                "parent": "aura:template"
            },
            {
                "name": "bodyClass",
                "type": "string",
                "description": "Extra body CSS styles",
                "access": "global",
                "parent": "aura:template"
            }
        ],
        "description": "Default template used to bootstrap Aura framework. To use another template, extend aura:template and set attributes using aura:set."
    },
    "aura:componentEvent": {
        "type": "event",
        "namespace": "aura",
        "attributes": [],
        "description": "The root event of the event hierarchy for all events of type=\"APPLICATION\""
    },
    "aura:methodCall": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "name",
                "type": "string",
                "description": "The name of the method called.",
                "access": "global",
                "parent": "aura:methodCall"
            },
            {
                "name": "arguments",
                "type": "list",
                "description": "The list of arguments passed into the public method.",
                "access": "global",
                "parent": "aura:methodCall"
            }
        ],
        "description": "Indicates that a public method was called."
    },
    "lightning:formattedPhone": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "integer",
                "description": "Sets the phone number to display.",
                "access": "global",
                "parent": "lightning:formattedPhone"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the phone number is clicked.",
                "access": "global",
                "parent": "lightning:formattedPhone"
            }
        ],
        "description": "Displays a phone number as a hyperlink with the tel: URL scheme. This component requires API version 41.0 and later."
    },
    "aura:noAccess": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "redirectURL",
                "type": "string",
                "description": "A url that the server says the application should redirect the browser to when this event fires.",
                "access": "global",
                "parent": "aura:noAccess"
            }
        ],
        "description": "Indicates that a requested resource is not accessible due to security constraints on that resource."
    },
    "lightning:dynamicIcon": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The Lightning Design System name of the dynamicIcon. Valid values are: ellie, eq, score, strength, trend, and waffle.",
                "access": "global",
                "parent": "lightning:dynamicIcon"
            },
            {
                "name": "option",
                "type": "string",
                "description": "The option attribute changes the appearance of the dynamicIcon. The options available depend on the type attribute.                 For eq: play (default) or stop                 For score: positive (default) or negative                 For strength: -3, -2, -1, 0 (default), 1, 2, 3                 For trend: neutral (default), up, or down",
                "access": "global",
                "parent": "lightning:dynamicIcon"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The alternative text used to describe the dynamicIcon. This text should describe what’s happening. For example, 'Graph is refreshing', not what the icon looks like, 'Graph'.",
                "access": "global",
                "parent": "lightning:dynamicIcon"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the icon is clicked.",
                "access": "global",
                "parent": "lightning:dynamicIcon"
            }
        ],
        "description": "Represents various animated icons with different states. This component requires API version 41.0 and later."
    },
    "lightning:accordionSection": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The unique section name to use with the activeSectionName attribute in the lightning:accordion component.",
                "access": "global",
                "parent": "lightning:accordionSection"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text that displays as the title of the section.",
                "access": "global",
                "parent": "lightning:accordionSection"
            },
            {
                "name": "actions",
                "type": "component[]",
                "description": "Enables a custom menu implementation. Actions are displayed to the right of the section title.",
                "access": "global",
                "parent": "lightning:accordionSection"
            }
        ],
        "description": "A single section that is nested in a lightning:accordion component. This component requires version 41.0 and later."
    },
    "lightning:tree": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "items",
                "type": "object",
                "description": "An array of key-value pairs that describe the tree. Keys include label, name, disabled, expanded, and items.",
                "access": "global",
                "parent": "lightning:tree"
            },
            {
                "name": "header",
                "type": "string",
                "description": "The text that's displayed as the tree heading.",
                "access": "global",
                "parent": "lightning:tree"
            },
            {
                "name": "onselect",
                "type": "action",
                "description": "The action triggered when a tree item is selected.",
                "access": "global",
                "parent": "lightning:tree"
            }
        ],
        "description": "Displays a nested tree. This component requires API version 41.0 and later."
    },
    "aura:doneRendering": {
        "type": "event",
        "namespace": "aura",
        "attributes": [],
        "description": "Indicates that the initial rendering of the root application or root component has completed."
    },
    "lightning:appHomeTemplate": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [],
        "description": "Indicates the component can be used as a flexipage page template for the APP_PAGE page type"
    },
    "lightningcommunity:deflectionSignal": {
        "type": "event",
        "namespace": "lightningcommunity",
        "attributes": [
            {
                "name": "sourceType",
                "type": "string",
                "description": "Descriptor of where deflection occured. Only signals with supported types will get processed. sourceType is synonymous with signalAgent.",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            },
            {
                "name": "source",
                "type": "string",
                "description": "The unique identifier of how the user arrived at the deflection item",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            },
            {
                "name": "destinationType",
                "type": "string",
                "description": "Entity type of the deflection item",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            },
            {
                "name": "destination",
                "type": "string",
                "description": "The id of the deflection item",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            },
            {
                "name": "payload",
                "type": "object",
                "description": "Additional information about the deflection signal. The content of the payload depends on the sourceType.",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            },
            {
                "name": "shouldSubmitSourceTypeSignals",
                "type": "boolean",
                "description": "Once an event is fired with shouldSubmitSourceTypeSignals=true,all signals of that                      sourceType are submitted to the server in a single batch to be processed. This should always be true unless signals are logically dependent on each other and must be processed together.",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            },
            {
                "name": "callback",
                "type": "object",
                "description": "Callback function invoked after signal is received and processed. Only called if shouldSubmitSourceTypeSignals=true.",
                "access": "global",
                "parent": "lightningcommunity:deflectionSignal"
            }
        ],
        "description": "This event is fired whenever a community user interacts with a deflection item (an item determined to be responsible for a case deflection).                                                                          Reports can then be created on supported signal types."
    },
    "lightning:omniChannelWorkClosed": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "workItemId",
                "type": "string",
                "description": "The ID of the object that’s routed through Omni-Channel.",
                "access": "global",
                "parent": "lightning:omniChannelWorkClosed"
            },
            {
                "name": "workId",
                "type": "string",
                "description": "The ID of a work assignment that’s routed to an agent.",
                "access": "global",
                "parent": "lightning:omniChannelWorkClosed"
            }
        ],
        "description": "Fired when a user closes a tab in the console that’s associated with a work item."
    },
    "lightning:breadcrumbs": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            }
        ],
        "description": "A hierarchy path of the page you're currently visiting within the website or app."
    },
    "ui:message": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "title",
                "type": "string",
                "description": "The title text for the message.",
                "access": "global",
                "parent": "ui:message"
            },
            {
                "name": "severity",
                "type": "string",
                "description": "The severity of the message. Possible values:  message (default), confirm, info, warning, error",
                "access": "global",
                "parent": "ui:message"
            },
            {
                "name": "closable",
                "type": "boolean",
                "description": "Specifies whether to display an 'x' that will close the alert when clicked. Default value is 'false'.",
                "access": "global",
                "parent": "ui:message"
            }
        ],
        "description": "Represents a message of varying severity levels"
    },
    "lightning:verticalNavigationItemIcon": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed for this navigation item.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemIcon"
            },
            {
                "name": "name",
                "type": "string",
                "description": "A unique identifier for this navigation item.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemIcon"
            },
            {
                "name": "href",
                "type": "string",
                "description": "The URL of the page that the navigation item goes to.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemIcon"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.",
                "access": "global",
                "parent": "lightning:verticalNavigationItemIcon"
            }
        ],
        "description": "A link and icon within a lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later."
    },
    "lightning:omniChannelLoginSuccess": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "statusId",
                "type": "string",
                "description": "The ID of the agent’s current presence status.",
                "access": "global",
                "parent": "lightning:omniChannelLoginSuccess"
            }
        ],
        "description": "Fired when an Omni-Channel user is logged in successfully."
    },
    "lightning:notificationsLibrary": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Displays messages via notices and toasts. This component requires API version 41.0 and later."
    },
    "aura:doneWaiting": {
        "type": "event",
        "namespace": "aura",
        "attributes": [],
        "description": "Indicates that the client-side framework is done waiting for a response to a server request.  This will always be preceded by a aura:waiting event."
    },
    "lightning:recordViewForm": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The ID of the record to be displayed.",
                "access": "global",
                "parent": "lightning:recordViewForm"
            },
            {
                "name": "objectApiName",
                "type": "string",
                "description": "The API name of the object.",
                "access": "global",
                "parent": "lightning:recordViewForm"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:recordViewForm"
            }
        ],
        "description": "Represents a record view that displays one or more fields, provided by lightning:outputField. This component requires API version 41.0 and later."
    },
    "lightning:actionOverride": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [],
        "description": "Enables a component to be used as an override for a standard action. You can override the View, New, Edit, and Tab standard actions on most standard and all custom components. This interface has no effect except when used within Lightning Experience and Salesforce1."
    },
    "lightning:progressIndicator": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Changes the visual pattern of the indicator. Valid values are base and path. This value defaults to base.",
                "access": "global",
                "parent": "lightning:progressIndicator"
            },
            {
                "name": "currentStep",
                "type": "string",
                "description": "The current step, which must match the value attribute of one of progressStep components. If a step is not provided, the value of the first progressStep component is used.",
                "access": "global",
                "parent": "lightning:progressIndicator"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "Changes the appearance of the progress indicator for the base type only. Valid values are base or shaded. The shaded variant adds a light gray border to the step indicators. This value defaults to base.",
                "access": "global",
                "parent": "lightning:progressIndicator"
            },
            {
                "name": "hasError",
                "type": "boolean",
                "description": "Indicates whether the current step is in error state and displays a warning icon on the step indicator. Applies to the base type only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:progressIndicator"
            }
        ],
        "description": "Provides a visual indication on the progress of a particular process. This component is available in version 41.0 and later."
    },
    "lightning:inputName": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "firstName",
                "type": "string",
                "description": "Displays the First Name field.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "salutation",
                "type": "string",
                "description": "Displays the Salutation field as a dropdown menu. An array of label-value pairs must be provided using the options attribute.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "lastName",
                "type": "string",
                "description": "Displays the Last Name field. This field is always displayed if you set required to true.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "middleName",
                "type": "string",
                "description": "Displays the Middle Name field.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "suffix",
                "type": "string",
                "description": "Displays the Suffix field.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "informalName",
                "type": "string",
                "description": "Displays the Informal Name field.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "options",
                "type": "list",
                "description": "Displays a list of salutation options, such as Dr. or Mrs., provided as label-value pairs.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the compound field must be filled out. A red asterisk is displayed on the Last Name field. An error message is displayed if a user interacts with the Last Name field and does not provide a value. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the compound field should be disabled. Disabled fields are grayed out and not clickable. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies whether the compound field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the compound field.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "fieldsToDisplay",
                "type": "list",
                "description": "List of fields to be displayed on the component. This value defaults to ['firstName', 'salutation', 'lastName']. Other field values include middleName, informalName, suffix.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "fieldLevelHelp",
                "type": "string",
                "description": "Help text detailing the purpose and function of name compound field.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the input releases focus.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when the value changes.",
                "access": "global",
                "parent": "lightning:inputName"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the input receives focus.",
                "access": "global",
                "parent": "lightning:inputName"
            }
        ],
        "description": "Represents a name compound field. This component requires API version 42.0 and later."
    },
    "lightning:formattedName": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "firstName",
                "type": "string",
                "description": "The value for the first name.",
                "access": "global",
                "parent": "lightning:formattedName"
            },
            {
                "name": "salutation",
                "type": "string",
                "description": "The value for the salutation, such as Dr. or Mrs.",
                "access": "global",
                "parent": "lightning:formattedName"
            },
            {
                "name": "lastName",
                "type": "string",
                "description": "The value for the last name.",
                "access": "global",
                "parent": "lightning:formattedName"
            },
            {
                "name": "middleName",
                "type": "string",
                "description": "The value for the middle name.",
                "access": "global",
                "parent": "lightning:formattedName"
            },
            {
                "name": "suffix",
                "type": "string",
                "description": "The value for the suffix.",
                "access": "global",
                "parent": "lightning:formattedName"
            },
            {
                "name": "informalName",
                "type": "string",
                "description": "The value for the informal name.",
                "access": "global",
                "parent": "lightning:formattedName"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The format for which to display the name. Valid values include short, medium, and long. This value defaults to long.",
                "access": "global",
                "parent": "lightning:formattedName"
            }
        ],
        "description": "Displays a formatted name that can include a salutation and suffix. This component requires API version 42.0 and later."
    },
    "lightning:relativeDateTime": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "object",
                "description": "The timestamp or JavaScript Date object to be formatted.",
                "access": "global",
                "parent": "lightning:relativeDateTime"
            }
        ],
        "description": "Displays the relative time difference between the source date-time and the provided date-time."
    },
    "ui:inputSelect": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "options",
                "type": "list",
                "description": "A list of options to use for the select. Note: setting this attribute will make the component ignore v.body",
                "access": "global",
                "parent": "ui:inputSelect"
            },
            {
                "name": "multiple",
                "type": "boolean",
                "description": "Specifies whether the input is a multiple select. Default value is “false”.",
                "access": "global",
                "parent": "ui:inputSelect"
            }
        ],
        "description": "Represents a drop-down list with options."
    },
    "aura:systemError": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "message",
                "type": "string",
                "description": "The message to be displayed during an error.",
                "access": "global",
                "parent": "aura:systemError"
            },
            {
                "name": "error",
                "type": "string",
                "description": "The system error that's returned.",
                "access": "global",
                "parent": "aura:systemError"
            }
        ],
        "description": "Indicates that an error has occurred."
    },
    "lightning:buttonGroup": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            }
        ],
        "description": "Represents a group of buttons."
    },
    "lightning:outputField": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "fieldName",
                "type": "string",
                "description": "The API name of the field to be displayed.",
                "access": "global",
                "parent": "lightning:outputField"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "Changes the appearance of the output. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:outputField"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:outputField"
            }
        ],
        "description": "Represents a read-only display of a label, help text, and value for a field on a Salesforce object. This component requires API version 41.0 and later."
    },
    "ui:menuSelect": {
        "type": "event",
        "namespace": "ui",
        "attributes": [
            {
                "name": "selectedItem",
                "type": "component[]",
                "description": "The menu item that's selected.",
                "access": "global",
                "parent": "ui:menuSelect"
            },
            {
                "name": "hideMenu",
                "type": "boolean",
                "description": "Hides menu if set to true.",
                "access": "global",
                "parent": "ui:menuSelect"
            },
            {
                "name": "deselectSiblings",
                "type": "boolean",
                "description": "Deselects the siblings of the currently selected menu item.",
                "access": "global",
                "parent": "ui:menuSelect"
            },
            {
                "name": "focusTrigger",
                "type": "boolean",
                "description": "Sets focus to menuTrigger.",
                "access": "global",
                "parent": "ui:menuSelect"
            }
        ],
        "description": "Indicates that a menu item inside a menu component is selected."
    },
    "ltng:sendMessage": {
        "type": "event",
        "namespace": "ltng",
        "attributes": [
            {
                "name": "message",
                "type": "string",
                "description": "A message in the form of a String or JSON.",
                "access": "global",
                "parent": "ltng:sendMessage"
            },
            {
                "name": "channel",
                "type": "string",
                "description": "Represents the channel name. Use a channel to enable a component to filter down to specific events.",
                "access": "global",
                "parent": "ltng:sendMessage"
            }
        ],
        "description": "Sends some data (String or JSON) to other components within the application"
    },
    "lightning:isUrlAddressable": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "pageReference",
                "type": "object",
                "description": "An object with a String 'type' property and Object 'attributes' and 'state' properties.",
                "access": "global",
                "parent": "lightning:hasPageReference"
            }
        ],
        "description": "This interface is used to indicate that a component can be directly navigated to through a URL."
    },
    "forceCommunity:analyticsInteraction": {
        "type": "event",
        "namespace": "forceCommunity",
        "attributes": [
            {
                "name": "hitType",
                "type": "string",
                "description": "The type of hit. Supported types: 'event', 'social', 'exception', 'timing'.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "eventCategory",
                "type": "string",
                "description": "The type or category of item that was interacted with. Required for 'event' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "eventAction",
                "type": "string",
                "description": "The type of action. Required for 'event' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "eventLabel",
                "type": "string",
                "description": "A label for providing additional event information.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "eventValue",
                "type": "integer",
                "description": "A positive numeric value associated with the event.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "socialNetwork",
                "type": "string",
                "description": "The network on which the action occurs. Required for 'social' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "socialAction",
                "type": "string",
                "description": "The type of action that happens. Required for 'social' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "socialTarget",
                "type": "string",
                "description": "Specifies the target of a social interaction. Required for 'social' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "exDescription",
                "type": "string",
                "description": "A description of the exception.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "exFatal",
                "type": "boolean",
                "description": "True if the exception was fatal.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "timingCategory",
                "type": "string",
                "description": "A string for categorizing all user timing variables into logical groups. Required for 'timing' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "timingVar",
                "type": "string",
                "description": "A string to identify the variable being recorded. Required for 'timing' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "timingValue",
                "type": "integer",
                "description": "The number of milliseconds in elapsed time to report to Google Analytics. Required for 'timing' hitType.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            },
            {
                "name": "timingLabel",
                "type": "string",
                "description": "A string that can be used to add flexibility in visualizing user timings in the reports.",
                "access": "global",
                "parent": "forceCommunity:analyticsInteraction"
            }
        ],
        "description": "Tracks events triggered by custom components in communities and sends the data to Google Analytics."
    },
    "lightning:tabset": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "componentdefref[]",
                "description": "The body of the component. This could be one or more lightning:tab components.",
                "access": "global",
                "parent": "lightning:tabset"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the tabset. Accepted variants are default, scoped, and vertical.",
                "access": "global",
                "parent": "lightning:tabset"
            },
            {
                "name": "selectedTabId",
                "type": "string",
                "description": "Allows you to set a specific tab to open by default. If this attribute is not used, the first tab opens by default.",
                "access": "global",
                "parent": "lightning:tabset"
            },
            {
                "name": "onselect",
                "type": "action",
                "description": "The action that will run when the tab is clicked.",
                "access": "global",
                "parent": "lightning:tabset"
            }
        ],
        "description": "Represents a list of tabs."
    },
    "lightning:picklistPath": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The record's ID",
                "access": "global",
                "parent": "lightning:picklistPath"
            },
            {
                "name": "picklistFieldApiName",
                "type": "string",
                "description": "The API name of the field from which the path is derived. For example, StageName for Opportunity.",
                "access": "global",
                "parent": "lightning:picklistPath"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "Changes the appearance of the path. Choose between linear and non-linear formats. In linear paths, completed steps show a checkmark. In non-linear paths, completed steps show the step name. We show linear paths by default.",
                "access": "global",
                "parent": "lightning:picklistPath"
            },
            {
                "name": "onselect",
                "type": "action",
                "description": "The action triggered when a step on the path is clicked.",
                "access": "global",
                "parent": "lightning:picklistPath"
            }
        ],
        "description": "Displays a path based on a specified picklist field. This component requires API 41.0 and later."
    },
    "force:recordView": {
        "type": "component",
        "namespace": "force",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "record",
                "type": "sobject",
                "description": "The record (SObject) to load, optional if recordId attribute is specified.",
                "access": "global",
                "parent": "force:recordView"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The Id of the record to load, optional if record attribute is specified.",
                "access": "global",
                "parent": "force:recordView"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of layout to use to display the record. The default is FULL, and is the only valid type.",
                "access": "global",
                "parent": "force:recordView"
            }
        ],
        "description": "Generates a view of the specified Salesforce record."
    },
    "lightning:omniChannelWorkloadChanged": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "configuredCapacity",
                "type": "string",
                "description": "The configured capacity for the agent.",
                "access": "global",
                "parent": "lightning:omniChannelWorkloadChanged"
            },
            {
                "name": "previousWorkload",
                "type": "string",
                "description": "The agent’s workload before the change.",
                "access": "global",
                "parent": "lightning:omniChannelWorkloadChanged"
            },
            {
                "name": "newWorkload",
                "type": "string",
                "description": "The agent’s new workload after the change.",
                "access": "global",
                "parent": "lightning:omniChannelWorkloadChanged"
            }
        ],
        "description": "Fired when an agent’s workload changes."
    },
    "lightning:progressBar": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant of the progress bar. Valid values are base and circular.",
                "access": "global",
                "parent": "lightning:progressBar"
            },
            {
                "name": "value",
                "type": "integer",
                "description": "The percentage value of the progress bar.",
                "access": "global",
                "parent": "lightning:progressBar"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size of the progress bar. Valid values are x-small, small, medium, and large. The default value is medium.",
                "access": "global",
                "parent": "lightning:progressBar"
            }
        ],
        "description": "Displays a horizontal progress bar from left to right to indicate the progress of an operation. This component requires API version 41.0 and later."
    },
    "ui:menuList": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "visible",
                "type": "boolean",
                "description": "Controls the visibility of the menu. The default is false, which hides the menu.",
                "access": "global",
                "parent": "ui:menuList"
            },
            {
                "name": "closeOnTabKey",
                "type": "boolean",
                "description": "Indicates whether to close the target list on tab key or not.",
                "access": "global",
                "parent": "ui:popupTarget"
            },
            {
                "name": "autoPosition",
                "type": "boolean",
                "description": "Move the popup target up when there is not enough space at the bottom to display. Note: even if autoPosition is set to false, popup will still position the menu relative to the trigger. To override default positioning, use manualPosition attribute.",
                "access": "global",
                "parent": "ui:popupTarget"
            },
            {
                "name": "curtain",
                "type": "boolean",
                "description": "Whether or not to apply an overlay under the target.",
                "access": "global",
                "parent": "ui:popupTarget"
            },
            {
                "name": "closeOnClickOutside",
                "type": "boolean",
                "description": "Close target when user clicks or taps outside of the target",
                "access": "global",
                "parent": "ui:popupTarget"
            },
            {
                "name": "menuItems",
                "type": "list",
                "description": "A list of menu items set explicitly using instances of the Java class: aura.​components.​ui.MenuItem.",
                "access": "global",
                "parent": "ui:menuList"
            }
        ],
        "description": "A menu component that contains menu items."
    },
    "force:inputField": {
        "type": "component",
        "namespace": "force",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "The CSS style used to display the field.",
                "access": "global",
                "parent": "force:inputFieldInternal"
            },
            {
                "name": "value",
                "type": "object",
                "description": "Data value of Salesforce field to which to bind.",
                "access": "global",
                "parent": "force:field"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether this field is required or not.",
                "access": "global",
                "parent": "force:inputFieldInternal"
            },
            {
                "name": "errorComponent",
                "type": "component[]",
                "description": "For internal use only. Displays error messages for the field.",
                "access": "global",
                "parent": "force:inputFieldInternal"
            }
        ],
        "description": "A component that provides a concrete type-specific input component implementation based on the data to which it is bound."
    },
    "ui:inputText": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            }
        ],
        "description": "Represents an input field suitable for entering a single line of free-form text."
    },
    "ui:outputEmail": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The output value of the email",
                "access": "global",
                "parent": "ui:outputEmail"
            }
        ],
        "description": "Displays an email address in an HTML anchor (<a>) element. The leading and trailing space are trimmed."
    },
    "lightning:pillContainer": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "items",
                "type": "list",
                "description": "An array of items to be rendered as pills in a container.",
                "access": "global",
                "parent": "lightning:pillContainer"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Aria label for the pill container.",
                "access": "global",
                "parent": "lightning:pillContainer"
            },
            {
                "name": "singleLine",
                "type": "boolean",
                "description": "Whether keep pills in single line.",
                "access": "global",
                "parent": "lightning:pillContainer"
            },
            {
                "name": "onitemremove",
                "type": "action",
                "description": "The action triggered when a pill is removed.",
                "access": "global",
                "parent": "lightning:pillContainer"
            }
        ],
        "description": "A list of pills grouped in a container. This component requires API version 42.0 and later. "
    },
    "lightning:recordForm": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "fields",
                "type": "string[]",
                "description": "List of fields to be displayed.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The ID of the record to be displayed.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "objectApiName",
                "type": "string",
                "description": "The API name of the object.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "layoutType",
                "type": "string",
                "description": "The type of layout to use to display the form fields. Possible values: Compact, Full.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "columns",
                "type": "number",
                "description": "Specifies the number of columns for the form.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "mode",
                "type": "string",
                "description": "Specifies the interaction and display style for the form. Possible values: view, edit, readonly",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "recordTypeId",
                "type": "string",
                "description": "The ID of the record type, which is required if you created multiple record types but don't have a default.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "onload",
                "type": "action",
                "description": "The action triggered when the form data is loaded.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "onsubmit",
                "type": "action",
                "description": "The action triggered when the form is submitted.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "onsuccess",
                "type": "action",
                "description": "The action triggered when the form is saved.",
                "access": "global",
                "parent": "lightning:recordForm"
            },
            {
                "name": "onerror",
                "type": "action",
                "description": "The action triggered when there is an error on form submission.",
                "access": "global",
                "parent": "lightning:recordForm"
            }
        ],
        "description": "Creates an editable form or display form for a record. This component requires API version 43.0 and later."
    },
    "lightning:availableForFlowScreens": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "availableActions",
                "type": "string[]",
                "description": "The navigation actions available for this screen. Valid actions are NEXT, PREVIOUS, FINISH, and PAUSE.",
                "access": "global",
                "parent": "lightning:availableForFlowScreens"
            },
            {
                "name": "screenHelpText",
                "type": "string",
                "description": "Help text for this screen.",
                "access": "global",
                "parent": "lightning:availableForFlowScreens"
            },
            {
                "name": "navigateFlow",
                "type": "action",
                "description": "Reference the appropriate navigation action to move away from this screen.",
                "access": "global",
                "parent": "lightning:availableForFlowScreens"
            },
            {
                "name": "validate",
                "type": "action",
                "description": "Custom validation to run when the flow is navigated to the next screen. Pass a function into this attribute that evaluates the component and returns values for isValid and errorMessage.",
                "access": "global",
                "parent": "lightning:availableForFlowScreens"
            }
        ],
        "description": "To make a component available for flow screens, implement the lightning:availableForFlowScreens interface."
    },
    "ui:menuTriggerPress": {
        "type": "event",
        "namespace": "ui",
        "attributes": [],
        "description": "Indicates that the menu trigger is clicked."
    },
    "aura:expression": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "value",
                "type": "string",
                "description": "The expression to evaluate and render.",
                "access": "global",
                "parent": "aura:expression"
            }
        ],
        "description": "Renders the value to which an expression evaluates. Creates an instance of this component which renders the                         referenced \"property reference value\" set to the value attribute when expressions are found in free text or markup."
    },
    "lightning:tabRefreshed": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "tabId",
                "type": "string",
                "description": "The currently refreshed tab ID.",
                "access": "global",
                "parent": "lightning:tabRefreshed"
            }
        ],
        "description": "Fires when a Console workspace or subtab has been successfully refreshed."
    },
    "lightning:buttonStateful": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "state",
                "type": "boolean",
                "description": "The state of the button, which shows whether the button has been selected or not. The default state is false.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "labelWhenOff",
                "type": "string",
                "description": "The text to be displayed inside the button when state is false.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "labelWhenOn",
                "type": "string",
                "description": "The text to be displayed inside the button when state is true.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "labelWhenHover",
                "type": "string",
                "description": "The text to be displayed inside the button when state is true and the button receives focus.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "iconNameWhenOff",
                "type": "string",
                "description": "The name of the icon to be used in the format \\'utility:add\\' when the state is false.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "iconNameWhenOn",
                "type": "string",
                "description": "The name of the icon to be used in the format \\'utility:check\\' when the state is true.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "iconNameWhenHover",
                "type": "string",
                "description": "The name of the icon to be used in the format \\'utility:close\\' when the state is true and the button receives focus.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the button. Accepted variants include brand, destructive, inverse, neutral, success, and text. This value defaults to neutral.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the button is clicked.",
                "access": "global",
                "parent": "lightning:buttonStateful"
            }
        ],
        "description": "A button that toggles between states."
    },
    "ui:outputURL": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The URL of the page that the link goes to.",
                "access": "global",
                "parent": "ui:outputURL"
            },
            {
                "name": "iconClass",
                "type": "string",
                "description": "The CSS style used to display the icon or image.",
                "access": "global",
                "parent": "ui:outputURL"
            },
            {
                "name": "title",
                "type": "string",
                "description": "The text to display as a tooltip when the mouse pointer hovers over this component.",
                "access": "global",
                "parent": "ui:outputURL"
            },
            {
                "name": "target",
                "type": "string",
                "description": "The target destination where this rendered component is displayed. Possible values: _blank, _parent, _self, _top",
                "access": "global",
                "parent": "ui:outputURL"
            },
            {
                "name": "alt",
                "type": "string",
                "description": "The alternate text description for image (used when there is no label)",
                "access": "global",
                "parent": "ui:outputURL"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:outputURL"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:outputURL"
            }
        ],
        "description": "Displays a link to a URL as specified by the value attribute, rendered on a given text (label attribute) and image, if any."
    },
    "aura:locationChange": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "token",
                "type": "string",
                "description": "The new hash part of the url",
                "access": "global",
                "parent": "aura:locationChange"
            },
            {
                "name": "querystring",
                "type": "string",
                "description": "The query string portion of the hash that is stripped off and applied to the event as parameters.",
                "access": "global",
                "parent": "aura:locationChange"
            }
        ],
        "description": "Indicates that the hash part of the url in the brower's location bar has been modified."
    },
    "wave:waveDashboard": {
        "type": "component",
        "namespace": "wave",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "Id of the current entity in the context of which the component is being displayed.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "dashboardId",
                "type": "string",
                "description": "The unique ID of the dashboard. You can get a dashboard’s ID, an 18-character code beginning with 0FK, from the dashboard's URL, or you can request it through the API. This attribute can be used instead of the developer name, but it can't be included if the name has been set. One of the two is required.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "developerName",
                "type": "string",
                "description": "The unique developer name of the dashboard. You can request the developer name through the API. This attribute can be used instead of the dashboard ID, but it can't be included if the ID has been set. One of the two is required.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "hideOnError",
                "type": "boolean",
                "description": "Controls whether or not users see a dashboard that has an error. When this attribute is set to true, if the dashboard has an error, it won’t appear on the page. When set to false, the dashboard appears but doesn’t show any data. An error can occur when a user doesn't have access to the dashboard or it has been deleted. ",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "height",
                "type": "integer",
                "description": "Specifies the height of the dashboard, in pixels.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "showSharing",
                "type": "boolean",
                "description": "If true, and the dashboard is shareable, then the dashboard shows the Share icon. If false, the dashboard doesn't show the Share icon. To show the Share icon in the dashboard, the smallest supported frame size is 800 x 612 pixels.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "showTitle",
                "type": "boolean",
                "description": "If true, the dashboard’s title is included above the dashboard. If false, the dashboard appears without a title.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "showHeader",
                "type": "boolean",
                "description": "If true, the dashboard is displayed with a header bar that includes dashboard information and controls. If false, the dashboard appears without a header bar. Note that the header bar automatically appears when either showSharing or showTitle is true.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "rendered",
                "type": "boolean",
                "description": "Specifies whether or not the component is rendered on the page.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "filter",
                "type": "string",
                "description": "Adds selections or filters to the embedded dashboard at runtime. The filter attribute is configured using JSON. For filtering by dimension, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': ['$value3', '$value4']}}]}}. For filtering on measures, use this syntax: {'datasets' : {'dataset1': [ {'fields': ['field1'], 'selection': ['$value1', '$value2']}, {'fields': ['field2'], 'filter': { 'operator': 'operator1', 'values': [[$value3]]}}]}}. With the selection option, the dashboard is shown with all its data, and the specified dimension values are highlighted. With the filter option, the dashboard is shown with only filtered data. For more information, see https://help.salesforce.com/articleView?id=bi_embed_lightning.htm.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "openLinksInNewWindow",
                "type": "boolean",
                "description": "If false, links to other dashboards will be opened in the same window.",
                "access": "global",
                "parent": "wave:waveDashboard"
            },
            {
                "name": "accessToken",
                "type": "string",
                "description": "A valid access token obtained by logging into Salesforce. Useful when the component is used by Lightning Out in a non salesforce domain.",
                "access": "global",
                "parent": "wave:waveDashboard"
            }
        ],
        "description": "Use this component to add a Salesforce Einstein Analytics dashboard to a Lightning Experience page."
    },
    "lightning:card": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "title",
                "type": "object",
                "description": "The title can include text or another component, and is displayed in the header.",
                "access": "global",
                "parent": "lightning:card"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. The icon is displayed in the header to the left of the title.",
                "access": "global",
                "parent": "lightning:card"
            },
            {
                "name": "actions",
                "type": "component[]",
                "description": "Actions are components such as button or buttonIcon. Actions are displayed in the header.",
                "access": "global",
                "parent": "lightning:card"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the card. Accepted variants include base or narrow. This value defaults to base.",
                "access": "global",
                "parent": "lightning:card"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:card"
            },
            {
                "name": "footer",
                "type": "object",
                "description": "The footer can include text or another component",
                "access": "global",
                "parent": "lightning:card"
            }
        ],
        "description": "Cards are used to apply a container around a related grouping of information."
    },
    "lightning:inputField": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "fieldName",
                "type": "string",
                "description": "The API name of the field to be displayed.",
                "access": "global",
                "parent": "lightning:inputField"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:inputField"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The field value, which overrides the existing value.",
                "access": "global",
                "parent": "lightning:inputField"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when the input value changes.",
                "access": "global",
                "parent": "lightning:inputField"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Whether or not the field is disabled. Defaults to false for readonly fields, true for other fields.",
                "access": "global",
                "parent": "lightning:inputField"
            }
        ],
        "description": "Represents an editable input for a field on a Salesforce object. This component requires API version 42.0 and later."
    },
    "aura:unescapedHtml": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of <aura:unescapedHtml> is ignored and won't be rendered.",
                "access": "global",
                "parent": "aura:unescapedHtml"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The string that should be rendered as unescaped HTML.",
                "access": "global",
                "parent": "aura:unescapedHtml"
            }
        ],
        "description": "The value assigned to this component will be rendered as-is, without altering its contents. It's intended for outputting pre-formatted HTML, for example, where the formatting is arbitrary, or expensive to calculate. The body of this component is ignored, and won't be rendered. Warning: this component outputs value as unescaped HTML, which introduces the possibility of security vulnerabilities in your code. You must sanitize user input before rendering it unescaped, or you will create a cross-site scripting (XSS) vulnerability. Only use <aura:unescapedHtml> with trusted or sanitized sources of data."
    },
    "lightning:formattedLocation": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "latitude",
                "type": "decimal",
                "description": "The latitude value of the geolocation. Latitude values must be within -90 and 90.",
                "access": "global",
                "parent": "lightning:formattedLocation"
            },
            {
                "name": "longitude",
                "type": "decimal",
                "description": "The longitude value of the geolocation. Longitude values must be within -180 and 180.",
                "access": "global",
                "parent": "lightning:formattedLocation"
            }
        ],
        "description": "Displays a geolocation in decimal degrees (DD) using the format [latitude, longitude]. This component requires API version 41.0 and later."
    },
    "lightning:fileUpload": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text label for the file uploader.",
                "access": "global",
                "parent": "lightning:fileUpload"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of the input element.",
                "access": "global",
                "parent": "lightning:fileUpload"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The record Id of the record that the uploaded file is associated to.",
                "access": "global",
                "parent": "lightning:fileUpload"
            },
            {
                "name": "multiple",
                "type": "boolean",
                "description": "Specifies whether a user can upload more than one file simultanesouly. This value defaults to false.",
                "access": "global",
                "parent": "lightning:fileUpload"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether this component should be displayed in a disabled state. Disabled components can't be clicked. This value defaults to false.",
                "access": "global",
                "parent": "lightning:fileUpload"
            },
            {
                "name": "accept",
                "type": "list",
                "description": "Comma-separated list of file extensions that can be uploaded in the format .ext, such as .pdf, .jpg, or .png",
                "access": "global",
                "parent": "lightning:fileUpload"
            },
            {
                "name": "onuploadfinished",
                "type": "action",
                "description": "The action triggered when files have finished uploading.",
                "access": "global",
                "parent": "lightning:fileUpload"
            }
        ],
        "description": "A file uploader for uploading and attaching files to records."
    },
    "force:recordSaveSuccess": {
        "type": "event",
        "namespace": "force",
        "attributes": [],
        "description": "Indicates that the record has been successfully saved."
    },
    "lightning:availableForChatterExtensionRenderer": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "payload",
                "type": "object",
                "description": "Payload preserved for this extension that is associated with this feed item.",
                "access": "global",
                "parent": "lightning:availableForChatterExtensionRenderer"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes based on where the extension is rendered. Valid values are FEED and PREVIEW. The value defaults to FEED",
                "access": "global",
                "parent": "lightning:availableForChatterExtensionRenderer"
            }
        ],
        "description": "Enables a component to be used as a Chatter Extension Renderer"
    },
    "force:lightningQuickActionWithoutHeader": {
        "type": "interface",
        "namespace": "force",
        "attributes": [],
        "description": null
    },
    "forceCommunity:appLauncher": {
        "type": "component",
        "namespace": "forceCommunity",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Displays the App Launcher in Lightning communities to make it easy for members to move between their communities and their Salesforce org.      Add this component to any custom Lightning component in communities."
    },
    "lightning:flow": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "onstatuschange",
                "type": "action",
                "description": "The action triggered when the interview’s status changes or a new screen is displayed.",
                "access": "global",
                "parent": "lightning:flow"
            }
        ],
        "description": "Represents a flow interview in Lightning runtime. This component requires API version 41.0 and later."
    },
    "ui:menuItem": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "selected",
                "type": "boolean",
                "description": "The status of the menu item. True means this menu item is selected; False is not selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "hideMenuAfterSelected",
                "type": "boolean",
                "description": "Set to true to hide menu after the menu item is selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:menuItem"
            }
        ],
        "description": "A UI menu item in a ui:menuList component."
    },
    "lightning:formattedText": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "string",
                "description": "Text to output.",
                "access": "global",
                "parent": "lightning:formattedText"
            },
            {
                "name": "linkify",
                "type": "boolean",
                "description": "Specifies whether the text should be converted to a link. If set to true, URLs and email addresses are displayed in anchor tags.",
                "access": "global",
                "parent": "lightning:formattedText"
            }
        ],
        "description": "Displays text, replaces newlines with line breaks, and linkifies if requested. This component requires API version 41.0 and later."
    },
    "aura:valueDestroy": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "value",
                "type": "object",
                "description": "The component that is being destroyed.",
                "access": "global",
                "parent": "aura:valueDestroy"
            }
        ],
        "description": "Indicates that a component is being destroyed."
    },
    "force:lightningQuickAction": {
        "type": "interface",
        "namespace": "force",
        "attributes": [],
        "description": null
    },
    "forceChatter:feed": {
        "type": "component",
        "namespace": "forceChatter",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "feedDesign",
                "type": "string",
                "description": "Valid values include DEFAULT ( shows inline comments on desktop, a bit more detail ) or BROWSE ( primarily an overview of the feed items )",
                "access": "global",
                "parent": "forceChatter:feed"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The strategy used to find items associated with the subject. Valid values include: Bookmarks, Company, DirectMessages, Feeds, Files, Filter, Groups, Home, Moderation, Mute, News, PendingReview, Record, Streams, To, Topics, UserProfile.",
                "access": "global",
                "parent": "forceChatter:feed"
            },
            {
                "name": "subjectId",
                "type": "string",
                "description": "For most feeds tied to an entity, this is used specified the desired entity. Defaults to the current user if not specified",
                "access": "global",
                "parent": "forceChatter:feed"
            }
        ],
        "description": "Represents a Chatter Feed"
    },
    "lightning:verticalNavigationItem": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed for the navigation item.",
                "access": "global",
                "parent": "lightning:verticalNavigationItem"
            },
            {
                "name": "name",
                "type": "string",
                "description": "A unique identifier for the navigation item.",
                "access": "global",
                "parent": "lightning:verticalNavigationItem"
            },
            {
                "name": "href",
                "type": "string",
                "description": "The URL of the page that the navigation item goes to.",
                "access": "global",
                "parent": "lightning:verticalNavigationItem"
            }
        ],
        "description": "A text-only link within lightning:verticalNavigationSection or lightning:verticalNavigationOverflow. This component requires API version 41.0 and later."
    },
    "lightning:omniChannelStatusChanged": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "statusId",
                "type": "string",
                "description": "The ID of the agent’s current presence status.",
                "access": "global",
                "parent": "lightning:omniChannelStatusChanged"
            },
            {
                "name": "channels",
                "type": "string",
                "description": "The JSON string of channel objects.",
                "access": "global",
                "parent": "lightning:omniChannelStatusChanged"
            },
            {
                "name": "statusName",
                "type": "string",
                "description": "The name the agent’s current presence status.",
                "access": "global",
                "parent": "lightning:omniChannelStatusChanged"
            },
            {
                "name": "statusApiName",
                "type": "string",
                "description": "The API name of the agent’s current presence status.",
                "access": "global",
                "parent": "lightning:omniChannelStatusChanged"
            }
        ],
        "description": "Fired when an Omni-Channel user changes his or her status."
    },
    "lightningcommunity:backButton": {
        "type": "component",
        "namespace": "lightningcommunity",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Only utility icons can be used in this component.",
                "access": "global",
                "parent": "lightningcommunity:backButton"
            },
            {
                "name": "onnavigationcomplete",
                "type": "action",
                "description": "Event handler action fired after every page navigation is complete. 'navigationcomplete' event provides 'canGoBack' boolean parameter value.",
                "access": "global",
                "parent": "lightningcommunity:backButton"
            },
            {
                "name": "class",
                "type": "string",
                "description": "Styling class for back button.",
                "access": "global",
                "parent": "lightningcommunity:backButton"
            }
        ],
        "description": "Icon button to navigate to previous community page in myCommnunity IOS app."
    },
    "lightning:listView": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "objectApiName",
                "type": "string",
                "description": "The API name of the object to be displayed in this List View",
                "access": "global",
                "parent": "lightning:listView"
            },
            {
                "name": "listName",
                "type": "string",
                "description": "The developer name of the List View",
                "access": "global",
                "parent": "lightning:listView"
            },
            {
                "name": "rows",
                "type": "integer",
                "description": "Specifies the number of rows to initially load and additional rows after each subsequent 'Load More' click. The default and maximum number of rows value is 50.",
                "access": "global",
                "parent": "lightning:listView"
            },
            {
                "name": "showActionBar",
                "type": "boolean",
                "description": "Specifies whether the action bar displays. This value defaults to false.",
                "access": "global",
                "parent": "lightning:listView"
            },
            {
                "name": "enableInlineEdit",
                "type": "boolean",
                "description": "Specifies whether the inline edit of cells is enabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:listView"
            },
            {
                "name": "showRowLevelActions",
                "type": "boolean",
                "description": "Specifies whether row level actions are displayed (as a dropdown menu in the last column of the row). This value defaults to false.",
                "access": "global",
                "parent": "lightning:listView"
            },
            {
                "name": "showSearchBar",
                "type": "boolean",
                "description": "Specifies whether the search bar displays. This value defaults to false. Note: The server side may still disable search if it does not support searching.",
                "access": "global",
                "parent": "lightning:listView"
            }
        ],
        "description": "Displays a List View of the specified object. This component requires API 42.0 and later."
    },
    "lightning:accordion": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "activeSectionName",
                "type": "string",
                "description": "The activeSectionName changes the default expanded section. The first section in the accordion is expanded by default.",
                "access": "global",
                "parent": "lightning:accordion"
            },
            {
                "name": "allowMultipleSectionsOpen",
                "type": "boolean",
                "description": "If true, all sections will be closed by default and the accordion will allow multiple sections open at a time.",
                "access": "global",
                "parent": "lightning:accordion"
            },
            {
                "name": "onsectiontoggle",
                "type": "action",
                "description": "Action fired when the open sections change, it contains all open sections.",
                "access": "global",
                "parent": "lightning:accordion"
            }
        ],
        "description": "A collection of vertically stacked sections with multiple content areas. This component requires version 41.0 and later."
    },
    "ui:inputPhone": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            }
        ],
        "description": "Represents an input field for entering a telephone number."
    },
    "lightning:pill": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text label that displays in the pill.",
                "access": "global",
                "parent": "lightning:pill"
            },
            {
                "name": "href",
                "type": "string",
                "description": "The URL of the page that the link goes to.",
                "access": "global",
                "parent": "lightning:pill"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the button is clicked.",
                "access": "global",
                "parent": "lightning:pill"
            },
            {
                "name": "media",
                "type": "component[]",
                "description": "The icon or figure that's displayed next to the textual information.",
                "access": "global",
                "parent": "lightning:pill"
            },
            {
                "name": "hasError",
                "type": "boolean",
                "description": "Specifies whether the pill has errors. The default is false.",
                "access": "global",
                "parent": "lightning:pill"
            },
            {
                "name": "onremove",
                "type": "action",
                "description": "The action triggered when the pill is removed.",
                "access": "global",
                "parent": "lightning:pill"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name for the pill. This value is optional and can be used to identify the pill in a callback.",
                "access": "global",
                "parent": "lightning:pill"
            }
        ],
        "description": "A pill displays a label that can contain links and can be removed from view."
    },
    "force:recordSave": {
        "type": "event",
        "namespace": "force",
        "attributes": [],
        "description": "Record save request"
    },
    "ui:scrollerWrapper": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class applied to the outer element. This style is in addition to base classes output by the component.",
                "access": "global",
                "parent": "ui:scrollerWrapper"
            }
        ],
        "description": "Creates a container that enables native scrolling in the Salesforce app."
    },
    "force:appHostable": {
        "type": "interface",
        "namespace": "force",
        "attributes": [],
        "description": null
    },
    "lightning:hasPageReference": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "pageReference",
                "type": "object",
                "description": "An object with a String 'type' property and Object 'attributes' and 'state' properties.",
                "access": "global",
                "parent": "lightning:hasPageReference"
            }
        ],
        "description": "This interface is used to indicate that a component takes a pageReference Object as an attribute."
    },
    "ui:inputTextArea": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "rows",
                "type": "integer",
                "description": "The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "cols",
                "type": "integer",
                "description": "The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies whether the text area should be rendered as read-only. Default value is “false”.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "The text that is displayed by default.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "resizable",
                "type": "boolean",
                "description": "Specifies whether or not the textarea should be resizable.  Defaults to true.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element.",
                "access": "global",
                "parent": "ui:inputTextArea"
            }
        ],
        "description": "An HTML textarea element that can be editable or read-only. Scroll bars may not appear on Chrome browsers in Android devices, but you can select focus in the textarea to activate scrolling."
    },
    "clients:hasItemContext": {
        "type": "interface",
        "namespace": "clients",
        "attributes": [
            {
                "name": "mode",
                "type": "string",
                "description": "READONLY - An enum indicating the mode of the item. Possible values are 'view', 'edit'",
                "access": "global",
                "parent": "clients:hasItemContext"
            },
            {
                "name": "source",
                "type": "string",
                "description": "READONLY - An enum indicating where the source is coming from. Possible values are 'email', 'event'",
                "access": "global",
                "parent": "clients:hasItemContext"
            },
            {
                "name": "people",
                "type": "object",
                "description": "READONLY - An object representing the contacts on the current item.",
                "access": "global",
                "parent": "clients:hasItemContext"
            },
            {
                "name": "subject",
                "type": "string",
                "description": "READONLY - The subject of the current item.",
                "access": "global",
                "parent": "clients:hasItemContext"
            },
            {
                "name": "messageBody",
                "type": "string",
                "description": "READONLY - The body of the current item in plain text",
                "access": "global",
                "parent": "clients:hasItemContext"
            }
        ],
        "description": "Context Shape for Email / Event Components. Use this interface to interact with the mail clients."
    },
    "lightning:workspaceAPI": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "This is the Public API for accessing/manipulating workspaces (Tabs and Subtabs)"
    },
    "lightning:buttonMenu": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "componentdefref[]",
                "description": "The body of the component.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Optional text to be shown on the button.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the look of the button. Accepted variants include bare, container, border, border-filled, bare-inverse, and border-inverse. This value defaults to border.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "onselect",
                "type": "action",
                "description": "Action fired when a menu item is selected. The 'detail.menuItem' property of the passed event is the selected menu item.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "menuAlignment",
                "type": "string",
                "description": "Determines the alignment of the menu relative to the button. Available options are: auto, left, center, right, bottom-left, bottom-center, bottom-right. The auto option aligns the dropdown menu based on available space. This value defaults to left.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The name of the icon to be used in the format \\'utility:down\\'. This value defaults to utility:down. If an icon other than utility:down or utility:chevrondown is used, a utility:down icon is appended to the right of that icon.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "iconSize",
                "type": "string",
                "description": "The size of the icon. Options include xx-small, x-small, medium, or large. This value defaults to medium.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "If true, the menu is disabled. Disabling the menu prevents users from opening it. This value defaults to false.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "visible",
                "type": "boolean",
                "description": "If true, the menu items are displayed. This value defaults to false.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The assistive text for the button.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value for the button element. This value is optional and can be used when submitting a form.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "isLoading",
                "type": "boolean",
                "description": "If true, the menu is in a loading state and shows a spinner. This value defaults to false.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "loadingStateAlternativeText",
                "type": "string",
                "description": "Message displayed while the menu is in the loading state.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "isDraft",
                "type": "boolean",
                "description": "If true, the menu trigger shows a draft indicator. This value defaults to false.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "draftAlternativeText",
                "type": "string",
                "description": "Describes the reason for showing the draft indicator. This is required when the isDraft attribute is true.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            },
            {
                "name": "onopen",
                "type": "action",
                "description": "Action fired when the menu is opened.",
                "access": "global",
                "parent": "lightning:buttonMenu"
            }
        ],
        "description": "Represents a dropdown menu with a list of actions or functions."
    },
    "lightning:tabReplaced": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "tabId",
                "type": "string",
                "description": "The ID of the refreshed tab.",
                "access": "global",
                "parent": "lightning:tabReplaced"
            }
        ],
        "description": "Fires when a Console primary tab or subtab has been successfully replaced. For example, when saving a new record and the create form is replaced with the newly created Record Home."
    },
    "lightning:formattedEmail": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The email address that's displayed if a label is not provided.",
                "access": "global",
                "parent": "lightning:formattedEmail"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text label for the email.",
                "access": "global",
                "parent": "lightning:formattedEmail"
            },
            {
                "name": "hideIcon",
                "type": "boolean",
                "description": "If true, hides the email icon so only the email address is displayed.",
                "access": "global",
                "parent": "lightning:formattedEmail"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the email is clicked.",
                "access": "global",
                "parent": "lightning:formattedEmail"
            }
        ],
        "description": "Displays an email as a hyperlink with the mailto: URL scheme. This component requires API version 41.0 and later."
    },
    "ui:inputSelectOption": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "value",
                "type": "boolean",
                "description": "Indicates whether the status of the option is selected. Default value is “false”.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "text",
                "type": "string",
                "description": "The input value attribute.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            }
        ],
        "description": "An HTML option element that is nested in a ui:inputSelect component. Denotes the available options in the list."
    },
    "force:editRecord": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": null,
                "access": "global",
                "parent": "force:editRecord"
            }
        ],
        "description": "Displays the record edit screen for a given record"
    },
    "ui:radioMenuItem": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "selected",
                "type": "boolean",
                "description": "The status of the menu item. True means this menu item is selected; False is not selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "hideMenuAfterSelected",
                "type": "boolean",
                "description": "Set to true to hide menu after the menu item is selected.",
                "access": "global",
                "parent": "ui:radioMenuItem"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:menuItem"
            }
        ],
        "description": "​A menu item with a radio button that indicates a mutually exclusive selection and can be used to invoke an action. This component is nested in a ui:menu component."
    },
    "ui:inputDateTime": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The input value of the date/time as an ISO string.",
                "access": "global",
                "parent": "ui:inputDateTime"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The java.text.SimpleDateFormat style format string.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            },
            {
                "name": "displayDatePicker",
                "type": "boolean",
                "description": "Indicates if an icon that triggers the date picker is displayed in the field. The default is false.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            },
            {
                "name": "langLocale",
                "type": "string",
                "description": "Deprecated. The language locale used to format date time. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            }
        ],
        "description": "An input field for entering a date and time."
    },
    "aura:applicationEvent": {
        "type": "event",
        "namespace": "aura",
        "attributes": [],
        "description": "The root event of the event hierarchy for all events of type=\"APPLICATION\""
    },
    "ui:menu": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            }
        ],
        "description": "A dropdown menu list with a trigger that controls its visibility. To create a clickable link and menu items, use ui:menuTriggerLink and and ui:menuList component."
    },
    "ui:inputRichText": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "rows",
                "type": "integer",
                "description": "The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "cols",
                "type": "integer",
                "description": "The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies whether the text area should be rendered as read-only. Default value is “false”.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "The text that is displayed by default.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "resizable",
                "type": "boolean",
                "description": "Specifies whether or not the textarea should be resizable.  Defaults to true.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element.",
                "access": "global",
                "parent": "ui:inputTextArea"
            },
            {
                "name": "width",
                "type": "string",
                "description": "The editor UI outer width. This can be an integer, for pixel sizes, or any CSS-defined unit. If isRichText is set to false, use the cols attribute instead.",
                "access": "global",
                "parent": "ui:inputRichText"
            },
            {
                "name": "height",
                "type": "string",
                "description": "The height of the editing area (that includes the editor content). This can be an integer, for pixel sizes, or any CSS-defined length unit.",
                "access": "global",
                "parent": "ui:inputRichText"
            }
        ],
        "description": "An input field for entering rich text. This component is not supported by LockerService."
    },
    "lightning:formattedNumber": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "decimal",
                "description": "The value to be formatted.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "style",
                "type": "string",
                "description": "The number formatting style to use. Possible values are decimal, currency, and percent. This value defaults to decimal.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "currencyCode",
                "type": "string",
                "description": "Only used if style='currency', this attribute determines which currency is displayed. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "currencyDisplayAs",
                "type": "string",
                "description": "Determines how currency is displayed. Possible values are symbol, code, and name. This value defaults to symbol.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "minimumIntegerDigits",
                "type": "integer",
                "description": "The minimum number of integer digits that are required. Possible values are from 1 to 21.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "minimumFractionDigits",
                "type": "integer",
                "description": "The minimum number of fraction digits that are required.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "maximumFractionDigits",
                "type": "integer",
                "description": "The maximum number of fraction digits that are allowed.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "minimumSignificantDigits",
                "type": "integer",
                "description": "The minimum number of significant digits that are required. Possible values are from 1 to 21.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            },
            {
                "name": "maximumSignificantDigits",
                "type": "integer",
                "description": "The maximum number of significant digits that are allowed. Possible values are from 1 to 21.",
                "access": "global",
                "parent": "lightning:formattedNumber"
            }
        ],
        "description": "Displays formatted numbers for decimals, currency, and percentages."
    },
    "ltng:afterScriptsLoaded": {
        "type": "event",
        "namespace": "ltng",
        "attributes": [],
        "description": "Fired when ltng:require has loaded all scripts listed in ltng:require.scripts"
    },
    "lightning:overlayLibrary": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Displays messages via modals and popovers. This component requires API version 41.0 and later."
    },
    "ui:outputPhone": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The phone number displayed when this component is rendered.",
                "access": "global",
                "parent": "ui:outputPhone"
            }
        ],
        "description": "Displays the phone number in a URL link format."
    },
    "forceCommunity:navigationMenuBase": {
        "type": "component",
        "namespace": "forceCommunity",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "menuItems",
                "type": "object",
                "description": "Automatically populated with menu item’s data. This attribute is read-only.",
                "access": "global",
                "parent": "forceCommunity:navigationMenuBase"
            }
        ],
        "description": "An abstract component for customizing the navigation menu in a community, which loads menu data and handles navigation. The menu’s look and feel is controlled by the component that's extending it."
    },
    "force:createRecord": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "entityApiName",
                "type": "string",
                "description": "Required. The API name of the custom or standard object, such as \"Account\", \"Case\", \"Contact\", \"Lead\", \"Opportunity\", or \"namespace__objectName__c\".",
                "access": "global",
                "parent": "force:createRecord"
            },
            {
                "name": "recordTypeId",
                "type": "string",
                "description": "Non-null if recordTypes are enabled. Null means Master RecordType.",
                "access": "global",
                "parent": "force:createRecord"
            },
            {
                "name": "defaultFieldValues",
                "type": "map",
                "description": "Prepopulates fields on a record create panel, including fields not displayed on the panel. ID fields and rich text fields can't be prepopulated. Users must have create access to prepopulated fields. Errors during saving that are caused by field access limitations do not display error messages.         ",
                "access": "global",
                "parent": "force:createRecord"
            }
        ],
        "description": "Event fired to show the Full Record Create panel"
    },
    "ui:inputDefaultError": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string[]",
                "description": "The list of errors strings to be displayed.",
                "access": "global",
                "parent": "ui:inputDefaultError"
            }
        ],
        "description": "The default implementation of field-level errors, which iterates over the value and displays the message."
    },
    "ui:inputURL": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value currently in the input field.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            },
            {
                "name": "size",
                "type": "integer",
                "description": "The width of the input field, in characters. Corresponds to the size attribute of the rendered HTML input element.",
                "access": "global",
                "parent": "ui:inputTextComponent"
            }
        ],
        "description": "An input field for entering a URL."
    },
    "ui:checkboxMenuItem": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "selected",
                "type": "boolean",
                "description": "The status of the menu item. True means this menu item is selected; False is not selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "hideMenuAfterSelected",
                "type": "boolean",
                "description": "Set to true to hide menu after the menu item is selected.",
                "access": "global",
                "parent": "ui:menuItem"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:menuItem"
            }
        ],
        "description": "​A menu item with a checkbox that supports multiple selection and can be used to invoke an action. This component is nested in a ui:menu component."
    },
    "ui:menuTrigger": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:interactive"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:popupTrigger"
            },
            {
                "name": "title",
                "type": "string",
                "description": "The text to display as a tooltip when the mouse pointer hovers over this component.",
                "access": "global",
                "parent": "ui:popupTrigger"
            }
        ],
        "description": "A clickable link that expands and collapses a menu. To create a link for ui:menu, use ui:menuTriggerLink instead."
    },
    "aura:valueInit": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "value",
                "type": "object",
                "description": "The component that initialized.",
                "access": "global",
                "parent": "aura:valueInit"
            }
        ],
        "description": "Indicates that a component has been initialized."
    },
    "lightning:omniChannelLogout": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [],
        "description": "Fired when an Omni-Channel user is logged out."
    },
    "forceChatter:customOpenFile": {
        "type": "event",
        "namespace": "forceChatter",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "ID of the file record. This must not be empty.",
                "access": "global",
                "parent": "forceChatter:customOpenFile"
            }
        ],
        "description": "Adds custom logic for file open/tap action for Communities on mobile and tablet devices."
    },
    "ui:inputDate": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The input value of the date/time as an ISO string.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The java.text.SimpleDateFormat style format string.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            },
            {
                "name": "displayDatePicker",
                "type": "boolean",
                "description": "Indicates if an icon that triggers the date picker is displayed in the field. The default is false.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            },
            {
                "name": "langLocale",
                "type": "string",
                "description": "Deprecated. The language locale used to format date time. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
                "access": "global",
                "parent": "ui:inputDateComponent"
            }
        ],
        "description": "An input field for entering a date."
    },
    "lightning:spinner": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size of the spinner. Accepted sizes are small, medium, and large. This value defaults to medium.",
                "access": "global",
                "parent": "lightning:spinner"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the spinner. Accepted variants are base, brand, and inverse. This value defaults to base.",
                "access": "global",
                "parent": "lightning:spinner"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The alternative text used to describe the reason for the wait and need for a spinner.",
                "access": "global",
                "parent": "lightning:spinner"
            }
        ],
        "description": "Displays an animated spinner."
    },
    "lightning:verticalNavigation": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "compact",
                "type": "boolean",
                "description": "Specify true to reduce spacing between navigation items. This value defaults to false.",
                "access": "global",
                "parent": "lightning:verticalNavigation"
            },
            {
                "name": "shaded",
                "type": "boolean",
                "description": "Specify true when the vertical navigation is sitting on top of a shaded background. This value defaults to false.",
                "access": "global",
                "parent": "lightning:verticalNavigation"
            },
            {
                "name": "onbeforeselect",
                "type": "action",
                "description": "Action fired before an item is selected. The event params include the `name` of the selected item. To prevent the onselect handler from running, call event.preventDefault() in the onbeforeselect handler.",
                "access": "global",
                "parent": "lightning:verticalNavigation"
            },
            {
                "name": "onselect",
                "type": "action",
                "description": "Action fired when an item is selected. The event params include the `name` of the selected item.",
                "access": "global",
                "parent": "lightning:verticalNavigation"
            },
            {
                "name": "selectedItem",
                "type": "string",
                "description": "Name of the nagivation item to make active.",
                "access": "global",
                "parent": "lightning:verticalNavigation"
            },
            {
                "name": "ariaLabel",
                "type": "string",
                "description": "The aria label attribute for the navigation component",
                "access": "global",
                "parent": "lightning:verticalNavigation"
            }
        ],
        "description": "Represents a vertical list of links that either take the user to another page or parts of the page the user is in. This component requires API version 41.0 and later."
    },
    "ui:outputDate": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The output value of the date. It should be a date string in ISO-8601 format (YYYY-MM-DD).",
                "access": "global",
                "parent": "ui:outputDate"
            },
            {
                "name": "format",
                "type": "string",
                "description": "A string (pattern letters are defined in java.text.SimpleDateFormat) used to format the date and time of the value attribute.",
                "access": "global",
                "parent": "ui:outputDateComponent"
            },
            {
                "name": "langLocale",
                "type": "string",
                "description": "Deprecated. The language locale used to format date value. It only allows to use the value which is provided by Locale Value Provider, otherwise, it falls back to the value of $Locale.langLocale. It will be removed in an upcoming release.",
                "access": "global",
                "parent": "ui:outputDateComponent"
            }
        ],
        "description": "Displays a date in the default or specified format based on the user's locale."
    },
    "lightning:breadcrumb": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text label for the breadcrumb.",
                "access": "global",
                "parent": "lightning:breadcrumb"
            },
            {
                "name": "href",
                "type": "string",
                "description": "The URL of the page that the breadcrumb goes to.",
                "access": "global",
                "parent": "lightning:breadcrumb"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the breadcrumb is clicked.",
                "access": "global",
                "parent": "lightning:breadcrumb"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name for the breadcrumb component. This value is optional and can be used to identify the breadcrumb in a callback.",
                "access": "global",
                "parent": "lightning:breadcrumb"
            }
        ],
        "description": "An item in the hierarchy path of the page the user is on."
    },
    "lightning:formattedRichText": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "string",
                "description": "Sets the rich text to display.",
                "access": "global",
                "parent": "lightning:formattedRichText"
            },
            {
                "name": "disableLinkify",
                "type": "boolean",
                "description": "Prevents the component from creating links in the rich text.",
                "access": "global",
                "parent": "lightning:formattedRichText"
            }
        ],
        "description": "Displays rich text that's formatted with whitelisted tags and attributes. Other tags and attributes are removed and only their text content is displayed. This component requires API version 41.0 and later."
    },
    "lightning:conversationAgentSend": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "Record ID of the conversation",
                "access": "global",
                "parent": "lightning:conversationAgentSend"
            },
            {
                "name": "content",
                "type": "string",
                "description": "The text of a message in the chat log.",
                "access": "global",
                "parent": "lightning:conversationAgentSend"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the agent who is attempting to send the message as it appears in the chat log.",
                "access": "global",
                "parent": "lightning:conversationAgentSend"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of message that was received—for example, agent.",
                "access": "global",
                "parent": "lightning:conversationAgentSend"
            },
            {
                "name": "timestamp",
                "type": "date",
                "description": "The date and time the agent attempted to send the chat message.",
                "access": "global",
                "parent": "lightning:conversationAgentSend"
            }
        ],
        "description": "Indicates an agent sent a message"
    },
    "aura:rootComponent": {
        "type": "interface",
        "namespace": "aura",
        "attributes": [],
        "description": "This is a marker interface for top-level components like aura:component, aura:expression, and aura:html"
    },
    "aura:valueEvent": {
        "type": "event",
        "namespace": "aura",
        "attributes": [],
        "description": "The root event of the event hierarchy for all events of type=\"VALUE\""
    },
    "ui:outputTextArea": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The text to display.",
                "access": "global",
                "parent": "ui:outputTextArea"
            },
            {
                "name": "linkify",
                "type": "boolean",
                "description": "Indicates if the URLs in the text are set to render as hyperlinks.",
                "access": "global",
                "parent": "ui:outputTextArea"
            }
        ],
        "description": "Displays the text area as specified by the value attribute."
    },
    "lightning:formattedUrl": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The URL to be formatted.",
                "access": "global",
                "parent": "lightning:formattedUrl"
            },
            {
                "name": "target",
                "type": "string",
                "description": "Specifies where to open the link. Options include _blank, _parent, _self, and _top.",
                "access": "global",
                "parent": "lightning:formattedUrl"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text to display in the link.",
                "access": "global",
                "parent": "lightning:formattedUrl"
            },
            {
                "name": "tooltip",
                "type": "string",
                "description": "The text to display when the mouse hovers over the link.",
                "access": "global",
                "parent": "lightning:formattedUrl"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action triggered when the URL is clicked.",
                "access": "global",
                "parent": "lightning:formattedUrl"
            }
        ],
        "description": "Displays a URL as a hyperlink. This component requires API version 41.0 and later."
    },
    "lightning:fileCard": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "fileId",
                "type": "string",
                "description": "The Salesforce File ID (ContentDocument).",
                "access": "global",
                "parent": "lightning:fileCard"
            },
            {
                "name": "description",
                "type": "string",
                "description": "The description of the file, by default it is set to the filename",
                "access": "global",
                "parent": "lightning:fileCard"
            },
            {
                "name": "hideDescription",
                "type": "boolean",
                "description": "Hides the file description in the caption if enabled",
                "access": "global",
                "parent": "lightning:fileCard"
            }
        ],
        "description": "Displays a preview of an uploaded file available in Salesforce CRM Content or Salesforce Files."
    },
    "ltng:allowGuestAccess": {
        "type": "interface",
        "namespace": "ltng",
        "attributes": [],
        "description": "Allows guest user access on an application."
    },
    "ui:inputRadio": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "value",
                "type": "boolean",
                "description": "Indicates whether the status of the option is selected. Default value is “false”.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "errors",
                "type": "object[]",
                "description": "The list of errors to be displayed.",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the input is required. Default value is \"false\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "updateOn",
                "type": "string",
                "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\".",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "labelClass",
                "type": "string",
                "description": "The CSS class of the label component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "requiredIndicatorClass",
                "type": "string",
                "description": "The CSS class of the required indicator component",
                "access": "global",
                "parent": "ui:input"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether this radio button should be displayed in a disabled state. Disabled radio buttons can't be clicked. Default value is \"false\".",
                "access": "global",
                "parent": "ui:inputRadio"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name of the component.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            },
            {
                "name": "text",
                "type": "string",
                "description": "The input value attribute.",
                "access": "global",
                "parent": "ui:inputBaseOption"
            }
        ],
        "description": "The radio button used in the input."
    },
    "force:navigateToComponent": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "componentDef",
                "type": "string",
                "description": "The component to navigate to, for example, c:myComponent.",
                "access": "global",
                "parent": "force:navigateToComponent"
            },
            {
                "name": "componentAttributes",
                "type": "object",
                "description": "The attributes for the component.",
                "access": "global",
                "parent": "force:navigateToComponent"
            },
            {
                "name": "isredirect",
                "type": "boolean",
                "description": "Specifies whether the navigation is a redirect. If true, the browser replaces the current URL with the new one in the navigation history. This value defaults to false.",
                "access": "global",
                "parent": "force:navigateToComponent"
            }
        ],
        "description": "Navigates from a Lightning component to another."
    },
    "forceCommunity:availableForAllPageTypes": {
        "type": "interface",
        "namespace": "forceCommunity",
        "attributes": [],
        "description": "Enables a component for drag and drop in the Lightning Components panel in Community Builder."
    },
    "lightning:inputRichText": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "ariaLabel",
                "type": "string",
                "description": "Label describing the rich text editor to assistive technologies",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "ariaLabelledby",
                "type": "string",
                "description": "An element ID that provides a label for the rich text editor.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "ariaDescribedby",
                "type": "string",
                "description": "A space-separated list of element IDs that provides descriptive labels for the rich text editor.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the rich text editor.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "labelVisible",
                "type": "boolean",
                "description": "Specifies whether the label is visible or not. The default is false.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The HTML content in the rich text editor.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "disabledCategories",
                "type": "list",
                "description": "A comma-separated list of button categories to remove from the toolbar.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the editor is disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "valid",
                "type": "boolean",
                "description": "Specifies whether the editor content is valid. If invalid, the slds-has-error class is added. This value defaults to true.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "formats",
                "type": "list",
                "description": "A list of formats accepted by the text editor. By default, the list is computed based on enabled categories. The \"table\" format is always enabled to support copying and pasting of tables. If formats are specified, all desired formats must be specified. Omitting a format from the list removes the corresponding button.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the toolbar. Accepted variants include bottom-toolbar",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "messageWhenBadInput",
                "type": "string",
                "description": "Error message that's displayed when valid is false.",
                "access": "global",
                "parent": "lightning:inputRichText"
            },
            {
                "name": "shareWithEntityId",
                "type": "string",
                "description": "Entity ID to share the image with.",
                "access": "global",
                "parent": "lightning:inputRichText"
            }
        ],
        "description": "A WYSIWYG editor with a customizable toolbar for entering rich text"
    },
    "lightning:quickActionAPI": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "This component allows you to access methods for programmatically controlling actions on record pages in Lightning Experience. This component requires API version 43.0 and later."
    },
    "lightning:availableForChatterExtensionComposer": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [],
        "description": "Enables a component to be used as a chatter extension composer"
    },
    "lightning:inputAddress": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "addressLabel",
                "type": "string",
                "description": "The label of the address compound field.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "fieldLevelHelp",
                "type": "string",
                "description": "Help text detailing the purpose and function of the address compound field.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "streetLabel",
                "type": "string",
                "description": "The label of the street field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "cityLabel",
                "type": "string",
                "description": "The label of the city field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "provinceLabel",
                "type": "string",
                "description": "The label of the province field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "countryLabel",
                "type": "string",
                "description": "The label of the country field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "postalCodeLabel",
                "type": "string",
                "description": "The label of the postal code field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "street",
                "type": "string",
                "description": "The street field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "city",
                "type": "string",
                "description": "The city field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "province",
                "type": "string",
                "description": "The province field of the address. If provinceOptions is provided, this province value is selected by default.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "provinceOptions",
                "type": "list",
                "description": "The array of label-value pairs for the province. Displays a dropdown menu of options.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "country",
                "type": "string",
                "description": "The country field of the address. If countryOptions is provided, this country value is selected by default.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "countryOptions",
                "type": "list",
                "description": "The array of label-value pairs for the country. Displays a dropdown menu of options.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "postalCode",
                "type": "string",
                "description": "The postal code field of the address.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the address fields are disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies whether the address fields are required. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies whether the address fields are read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "showAddressLookup",
                "type": "boolean",
                "description": "Specifies whether to enable address lookup using Google Maps. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the compound field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the input releases focus.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when the value changes.",
                "access": "global",
                "parent": "lightning:inputAddress"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the input receives focus.",
                "access": "global",
                "parent": "lightning:inputAddress"
            }
        ],
        "description": "Represents an address compound field. This component requires API version 42.0 and later."
    },
    "lightningsnapin:minimizedUI": {
        "type": "interface",
        "namespace": "lightningsnapin",
        "attributes": [],
        "description": "This marker interface is used to indicate that a component can be used as the user interface for a minimized snap-in."
    },
    "lightning:tile": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text label that displays in the tile and hover text.",
                "access": "global",
                "parent": "lightning:tile"
            },
            {
                "name": "href",
                "type": "string",
                "description": "The URL of the page that the link goes to.",
                "access": "global",
                "parent": "lightning:tile"
            },
            {
                "name": "media",
                "type": "component[]",
                "description": "The icon or figure that's displayed next to the textual information.",
                "access": "global",
                "parent": "lightning:tile"
            }
        ],
        "description": "A grouping of related information associated with a record."
    },
    "force:navigateToSObject": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "networkId",
                "type": "string",
                "description": "Network that the event is associated with.",
                "access": "global",
                "parent": "force:isNetwork"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The record ID",
                "access": "global",
                "parent": "force:navigateToSObject"
            },
            {
                "name": "slideDevName",
                "type": "string",
                "description": "The slideDevName of the slide to navigate to. By default, options are 'chatter', 'related', 'detail'.",
                "access": "global",
                "parent": "force:navigateToSObject"
            },
            {
                "name": "isredirect",
                "type": "boolean",
                "description": "If we are redirecting in place, we don't want to create 2 history entries for hybrid. Instead hybrid ignores redirects as a history entry.",
                "access": "global",
                "parent": "force:navigateToSObject"
            }
        ],
        "description": "Navigates to an sObject record specified by recordId."
    },
    "lightning:datatable": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "columns",
                "type": "list",
                "description": "Array of the columns object that's used to define the data types. Required properties include 'label', 'dataKey', and 'type'. The default type is 'text'.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "data",
                "type": "object",
                "description": "The array of data to be displayed.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "keyField",
                "type": "string",
                "description": "Required for better performance. Associates each row with a unique ID.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "hideCheckboxColumn",
                "type": "boolean",
                "description": "Hides or displays the checkbox column for row selection. To hide the checkbox column, set hideCheckboxColumn to true. The default is false.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "hideTableHeader",
                "type": "boolean",
                "description": "Specifies whether the table header should be hidden.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "resizeColumnDisabled",
                "type": "boolean",
                "description": "Specifies whether column resizing is disabled. The default is false.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "suppressBottomBar",
                "type": "boolean",
                "description": "Specifies whether the inline edit Save/Cancel bottom bar should be hidden.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "minColumnWidth",
                "type": "integer",
                "description": "The minimum width for all columns. The default is 50px.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "maxColumnWidth",
                "type": "integer",
                "description": "The maximum width for all columns. The default is 1000px.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "resizeStep",
                "type": "integer",
                "description": "The width to resize the column when user press left or right arrow. The default is 10px.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "sortedBy",
                "type": "string",
                "description": "The column fieldName that controls the sorting order. Sort the data using the onsort event handler.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "sortedDirection",
                "type": "string",
                "description": "Specifies the sorting direction. Sort the data using the onsort event handler. Valid options include 'asc' and 'desc'.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "defaultSortDirection",
                "type": "string",
                "description": "Specifies the default sorting direction on an unsorted column. Valid options include 'asc' and 'desc'. The default is 'asc' for sorting in ascending order.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "showRowNumberColumn",
                "type": "boolean",
                "description": "Shows or hides the row number column. Set to true to show the row number column. The default is false.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "rowNumberOffset",
                "type": "integer",
                "description": "Determines where to start counting the row number. The default is 0.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "enableInfiniteLoading",
                "type": "boolean",
                "description": "Enables or disables infinite loading. The default is false.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "loadMoreOffset",
                "type": "integer",
                "description": "Determines when to trigger infinite loading based on how many pixels the table's scroll position is from the bottom of the table. The default is 20.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "isLoading",
                "type": "boolean",
                "description": "Specifies whether more data is being loaded and displays a spinner if so. The default is false.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "maxRowSelection",
                "type": "integer",
                "description": "The maximum number of rows that can be selected. Checkboxes are used for selection by default, and radio buttons are used when maxRowSelection is 1.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "selectedRows",
                "type": "list",
                "description": "Enables programmatic row selection with a list of keyField values.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "errors",
                "type": "object",
                "description": "Specifies an object containing information about cell level, row level, and table level errors. When it's set, error messages are displayed on the table accordingly.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "draftValues",
                "type": "object",
                "description": "The current values per row that are provided during inline edit.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "oncellchange",
                "type": "action",
                "description": "The action triggered when a cell's value changes after an inline edit. Returns the draftValues object.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onloadmore",
                "type": "action",
                "description": "The action triggered when infinite loading loads more data.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onrowselection",
                "type": "action",
                "description": "The action triggered when a row is selected. Returns the selectedRows object.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onsort",
                "type": "action",
                "description": "The action triggered when a column is sorted. Returns fieldName and sortDirection.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onheaderaction",
                "type": "action",
                "description": "The action triggered when a header action is clicked. By default, it also closes the header actions menu. Returns the action and columnDefinition objects.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onrowaction",
                "type": "action",
                "description": "The action triggered when a row action is clicked. By default, it also closes the row actions menu. Returns the eventDetails object.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onresize",
                "type": "action",
                "description": "The action triggered when the table renders columns the first time and every time its resized an specific column. Returns columnWidths.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "onsave",
                "type": "action",
                "description": "The action triggered when clicking on the table footer bar's save button during inline edit. Returns the draftValues object.",
                "access": "global",
                "parent": "lightning:datatable"
            },
            {
                "name": "oncancel",
                "type": "action",
                "description": "The action triggered when clicking on the table footer bar's cancel button during inline edit. All edited cells are reverted to their original values.",
                "access": "global",
                "parent": "lightning:datatable"
            }
        ],
        "description": "A table that displays columns of data, formatted according to type. This component requires API version 41.0 and later."
    },
    "lightningcommunity:allowInRelaxedCSP": {
        "type": "interface",
        "namespace": "lightningcommunity",
        "attributes": [],
        "description": "This interface is used to indicate that a component is allowed in a Relaxed CSP community page."
    },
    "flexipage:availableForAllPageTypes": {
        "type": "interface",
        "namespace": "flexipage",
        "attributes": [],
        "description": "Marks a component as being able to be used inside a Lightning App Builder page"
    },
    "ui:menuTriggerLink": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\".",
                "access": "global",
                "parent": "ui:interactive"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed on the component.",
                "access": "global",
                "parent": "ui:popupTrigger"
            },
            {
                "name": "title",
                "type": "string",
                "description": "The text to display as a tooltip when the mouse pointer hovers over this component.",
                "access": "global",
                "parent": "ui:popupTrigger"
            }
        ],
        "description": "A link that triggers a dropdown menu used in ui:menu"
    },
    "lightning:container": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "The CSS class for the iframe element.",
                "access": "global",
                "parent": "lightning:container"
            },
            {
                "name": "src",
                "type": "string",
                "description": "The resource name, landing page and query params in url format. Navigation is supported only for the single page identified.",
                "access": "global",
                "parent": "lightning:container"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "Used for alternative text in accessibility scenarios.",
                "access": "global",
                "parent": "lightning:container"
            },
            {
                "name": "onmessage",
                "type": "action",
                "description": "The client-side controller action to run when a message is received from the contained content.",
                "access": "global",
                "parent": "lightning:container"
            },
            {
                "name": "onerror",
                "type": "action",
                "description": "The client-side controller action to run when an error occurs when sending a message to the contained app.",
                "access": "global",
                "parent": "lightning:container"
            }
        ],
        "description": "Used to contain content that uses a third-party javascript framework such as Angular or React."
    },
    "force:navigateToRelatedList": {
        "type": "event",
        "namespace": "force",
        "attributes": [
            {
                "name": "relatedListId",
                "type": "string",
                "description": "The API name of the related list to display. For standard objects it is typically the related list's entity api name in plural form, such as 'Contacts' or '​Opportunitie​s'. For custom objects it takes the form of '{​YourCustom​Relationship​Label}__r' ",
                "access": "global",
                "parent": "force:navigateToRelatedList"
            },
            {
                "name": "parentRecordId",
                "type": "string",
                "description": "The ID of the parent record",
                "access": "global",
                "parent": "force:navigateToRelatedList"
            },
            {
                "name": "entityApiName",
                "type": "string",
                "description": "The entity API name of the related list",
                "access": "global",
                "parent": "force:navigateToRelatedList"
            }
        ],
        "description": "Navigates to the related list specified by parentRecordId."
    },
    "wave:selectionChanged": {
        "type": "event",
        "namespace": "wave",
        "attributes": [
            {
                "name": "noun",
                "type": "string",
                "description": "The type of the Wave asset for which a selection change event occurred.",
                "access": "global",
                "parent": "wave:selectionChanged"
            },
            {
                "name": "verb",
                "type": "string",
                "description": "The action that occurred on the Wave asset.",
                "access": "global",
                "parent": "wave:selectionChanged"
            },
            {
                "name": "id",
                "type": "string",
                "description": "The identifier of the Wave asset for which a selection change event occurred.",
                "access": "global",
                "parent": "wave:selectionChanged"
            },
            {
                "name": "payload",
                "type": "string",
                "description": "Contains the selection information from the asset that fired the event.",
                "access": "global",
                "parent": "wave:selectionChanged"
            }
        ],
        "description": "Wave event that sends selection change information to the Lightning component."
    },
    "lightning:conversationChatEnded": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "Record ID of the conversation",
                "access": "global",
                "parent": "lightning:conversationChatEnded"
            }
        ],
        "description": "Indicates a conversation has ended"
    },
    "lightning:helptext": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "content",
                "type": "string",
                "description": "Text to be shown in the popover.",
                "access": "global",
                "parent": "lightning:helptext"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon used as the visible element. Names are written in the format 'utility:info' where 'utility' is the category, and 'info' is the specific icon to be displayed. The default value is 'utility:info'.",
                "access": "global",
                "parent": "lightning:helptext"
            },
            {
                "name": "iconVariant",
                "type": "string",
                "description": "The iconVariant changes the appearance of the icon. Accepted variants include inverse, warning, error.",
                "access": "global",
                "parent": "lightning:helptext"
            }
        ],
        "description": "An icon with a text popover."
    },
    "lightning:availableForFlowActions": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "timeout",
                "type": "integer",
                "description": "Maximum time (in seconds) an asynchronous call can take before returning control to the flow and executing the Local Action element's fault connector. The default value is 120. If the value is 0 or a negative number, the call never times out.",
                "access": "global",
                "parent": "lightning:availableForFlowActions"
            }
        ],
        "description": "Enables a component's controller to be used as an action in a flow."
    },
    "lightning:select": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value of the select, also used as the default value to select the right option during init. If no value is provided, the first option will be selected.",
                "access": "global",
                "parent": "lightning:select"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that an input element should be disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies that an input field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "validity",
                "type": "object",
                "description": "Represents the validity states that an element can be in, with respect to constraint validation.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a value attribute changes.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text that describes the desired select input.",
                "access": "global",
                "parent": "lightning:select"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Error message to be displayed when the value is missing.",
                "access": "global",
                "parent": "lightning:select"
            }
        ],
        "description": "Represents a select input."
    },
    "aura:valueChange": {
        "type": "event",
        "namespace": "aura",
        "attributes": [
            {
                "name": "expression",
                "type": "string",
                "description": "The expression that triggered the value change.",
                "access": "global",
                "parent": "aura:valueChange"
            },
            {
                "name": "oldValue",
                "type": "object",
                "description": "The previous value that was changed.",
                "access": "global",
                "parent": "aura:valueChange"
            },
            {
                "name": "value",
                "type": "object",
                "description": "The new value.",
                "access": "global",
                "parent": "aura:valueChange"
            },
            {
                "name": "index",
                "type": "string",
                "description": "If the handler was registered through an ArrayValue or MapValue, the name/index of the changed Value in that ArrayValue or MapValue",
                "access": "global",
                "parent": "aura:valueChange"
            }
        ],
        "description": "Indicates that a Value has changed."
    },
    "ui:outputCurrency": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "decimal",
                "description": "The output value of the currency, which is defined as type Decimal.",
                "access": "global",
                "parent": "ui:outputCurrency"
            },
            {
                "name": "format",
                "type": "string",
                "description": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the default format based on the browser's locale will be used.",
                "access": "global",
                "parent": "ui:outputCurrency"
            },
            {
                "name": "currencyCode",
                "type": "string",
                "description": "The ISO 4217 currency code specified as a String, e.g. “USD”.",
                "access": "global",
                "parent": "ui:outputCurrency"
            },
            {
                "name": "currencySymbol",
                "type": "string",
                "description": "The currency symbol specified as a String.",
                "access": "global",
                "parent": "ui:outputCurrency"
            }
        ],
        "description": "Displays the currency in the default or specified format, such as with specific currency code or decimal places."
    },
    "ui:collapse": {
        "type": "event",
        "namespace": "ui",
        "attributes": [],
        "description": "Indicates that a component is collapsed."
    },
    "lightning:conversationCustomEvent": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "Record ID of the conversation",
                "access": "global",
                "parent": "lightning:conversationCustomEvent"
            },
            {
                "name": "type",
                "type": "string",
                "description": "Name of the custom event",
                "access": "global",
                "parent": "lightning:conversationCustomEvent"
            },
            {
                "name": "data",
                "type": "string",
                "description": "Data attached to the custom event",
                "access": "global",
                "parent": "lightning:conversationCustomEvent"
            }
        ],
        "description": "Indicates receipt of a custom event on a conversation"
    },
    "lightning:combobox": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "value",
                "type": "object",
                "description": "Specifies the value of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that an input element should be disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies that an input field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "validity",
                "type": "object",
                "description": "Represents the validity states that an element can be in, with respect to constraint validation.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a value attribute changes.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "options",
                "type": "object[]",
                "description": "A list of options that are available for selection. Each option has the following attributes: label and value.",
                "access": "global",
                "parent": "lightning:combobox"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the combobox.",
                "access": "global",
                "parent": "lightning:combobox"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed before an option is selected, to prompt the user to select an option. The default is \"Select an Option\".",
                "access": "global",
                "parent": "lightning:combobox"
            },
            {
                "name": "dropdownAlignment",
                "type": "string",
                "description": "Specifies where the drop-down list is aligned with or anchored to the selection field. By default the list is aligned with the selection field at the top so the list opens down.  Use bottom-left to make the selection field display at the bottom so the list opens above it.  Use auto to let the component determine where to open the list based on space available.",
                "access": "global",
                "parent": "lightning:combobox"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Error message to be displayed when the value is missing and input is required.",
                "access": "global",
                "parent": "lightning:combobox"
            },
            {
                "name": "fieldLevelHelp",
                "type": "string",
                "description": "Help text detailing the purpose and function of the combobox.",
                "access": "global",
                "parent": "lightning:combobox"
            },
            {
                "name": "spinnerActive",
                "type": "boolean",
                "description": "Displays a spinner to indicate activity in the dropdown list. This value defaults to false.",
                "access": "global",
                "parent": "lightning:combobox"
            }
        ],
        "description": "A widget that provides an input field that is readonly, accompanied with a dropdown list of selectable options."
    },
    "lightning:radioGroup": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "value",
                "type": "object",
                "description": "Specifies the value of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that an input element should be disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies that an input field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "validity",
                "type": "object",
                "description": "Represents the validity states that an element can be in, with respect to constraint validation.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a value attribute changes.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text label for the radio group.",
                "access": "global",
                "parent": "lightning:radioGroup"
            },
            {
                "name": "options",
                "type": "list",
                "description": "Array of label-value pairs for each radio button.",
                "access": "global",
                "parent": "lightning:radioGroup"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The style of the radio group. Options are radio or button. The default is radio.",
                "access": "global",
                "parent": "lightning:radioGroup"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Optional message displayed when no radio button is selected and the required attribute is set to true.",
                "access": "global",
                "parent": "lightning:radioGroup"
            }
        ],
        "description": "A radio button group that can have a single option selected. This component requires API version 41.0 and later."
    },
    "aura:text": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "value",
                "type": "string",
                "description": "The String to be rendered.",
                "access": "global",
                "parent": "aura:text"
            }
        ],
        "description": "Renders plain text.  When any free text (not a tag or attribute value) is found in markup, an instance of this component is created with the value attribute set to the text found in the markup."
    },
    "lightning:quipCard": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "parentRecordId",
                "type": "string",
                "description": "ID of the Salesforce record to display the card for.",
                "access": "global",
                "parent": "lightning:quipCard"
            }
        ],
        "description": "Quip card"
    },
    "force:recordEdit": {
        "type": "component",
        "namespace": "force",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The Id of the record to load.",
                "access": "global",
                "parent": "force:recordEdit"
            }
        ],
        "description": "Generates an editable view of the specified Salesforce record."
    },
    "ui:expand": {
        "type": "event",
        "namespace": "ui",
        "attributes": [],
        "description": "Indicates that a component is expanded."
    },
    "lightning:sendChatterExtensionPayload": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "payload",
                "type": "object",
                "description": "Payload data to be saved with the feed item.",
                "access": "global",
                "parent": "lightning:sendChatterExtensionPayload"
            },
            {
                "name": "extensionTitle",
                "type": "string",
                "description": "Title for the extension to be saved with the feed item.",
                "access": "global",
                "parent": "lightning:sendChatterExtensionPayload"
            },
            {
                "name": "extensionDescription",
                "type": "string",
                "description": "Description for the extension to be saved with the feed item",
                "access": "global",
                "parent": "lightning:sendChatterExtensionPayload"
            },
            {
                "name": "extensionThumbnailUrl",
                "type": "string",
                "description": "thumbnailUrl for the extension to be saved with the feedItem",
                "access": "global",
                "parent": "lightning:sendChatterExtensionPayload"
            }
        ],
        "description": "For Chatter Rich Publisher Apps only. Sends the payload and metadata that needs to be saved for the extension with the feed item."
    },
    "flexipage:availableForRecordHome": {
        "type": "interface",
        "namespace": "flexipage",
        "attributes": [],
        "description": "Able to be used inside a Record Home Lightning App Builder page"
    },
    "force:refreshView": {
        "type": "event",
        "namespace": "force",
        "attributes": [],
        "description": null
    },
    "force:outputField": {
        "type": "component",
        "namespace": "force",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "force:field"
            },
            {
                "name": "value",
                "type": "object",
                "description": "Data value of Salesforce field to which to bind.",
                "access": "global",
                "parent": "force:field"
            }
        ],
        "description": "A component that provides a concrete type-specific output component implementation based on the data to which it is bound."
    },
    "forceChatter:postCreated": {
        "type": "event",
        "namespace": "forceChatter",
        "attributes": [
            {
                "name": "feedItemId",
                "type": "string",
                "description": "The id of the feed item that has been created",
                "access": "global",
                "parent": "forceChatter:postCreated"
            }
        ],
        "description": "Fired when a post is made"
    },
    "lightning:formattedDateTime": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "object",
                "description": "The value to be formatted, which can be a Date object, timestamp, or an ISO8601 formatted string.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "hour12",
                "type": "boolean",
                "description": "Determines whether time is displayed as 12-hour. If false, time displays as 24-hour. The default setting is determined by the user's locale.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "weekday",
                "type": "string",
                "description": "Specifies how to display the day of the week. Allowed values are narrow, short, or long.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "era",
                "type": "string",
                "description": "Allowed values are narrow, short, or long.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "year",
                "type": "string",
                "description": "Allowed values are numeric or 2-digit.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "month",
                "type": "string",
                "description": "Allowed values are 2-digit, narrow, short, or long.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "day",
                "type": "string",
                "description": "Allowed values are numeric or 2-digit.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "hour",
                "type": "string",
                "description": "Allowed values are numeric or 2-digit.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "minute",
                "type": "string",
                "description": "Allowed values are numeric or 2-digit.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "second",
                "type": "string",
                "description": "Allowed values are numeric or 2-digit.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "timeZoneName",
                "type": "string",
                "description": "Allowed values are short or long. For example, the Pacific time zone would display as 'PST' if you select 'short', or 'Pacific Standard Time' if you select 'long.'",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            },
            {
                "name": "timeZone",
                "type": "string",
                "description": "The time zone to use. Implementations can include any time zone listed in the IANA time zone database. The default is the runtime's default time zone. Use this attribute only if you want to override the default time zone.",
                "access": "global",
                "parent": "lightning:formattedDateTime"
            }
        ],
        "description": "Displays formatted date and time."
    },
    "lightning:omniChannelWorkAccepted": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "workItemId",
                "type": "string",
                "description": "The ID of the object that’s routed through Omni-Channel.",
                "access": "global",
                "parent": "lightning:omniChannelWorkAccepted"
            },
            {
                "name": "workId",
                "type": "string",
                "description": "The ID of a work assignment that’s routed to an agent.",
                "access": "global",
                "parent": "lightning:omniChannelWorkAccepted"
            }
        ],
        "description": "Fired when a user accepts a work assignment, or when a work assignment is automatically accepted."
    },
    "aura:if": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "isTrue",
                "type": "boolean",
                "description": "An expression that must be fulfilled in order to display the body.",
                "access": "global",
                "parent": "aura:if"
            },
            {
                "name": "body",
                "type": "componentdefref[]",
                "description": "The components to render when isTrue evaluates to true.",
                "access": "global",
                "parent": "aura:if"
            },
            {
                "name": "else",
                "type": "componentdefref[]",
                "description": "The alternative to render when isTrue evaluates to false, and the body is not rendered.  Should always be set using the aura:set tag.",
                "access": "global",
                "parent": "aura:if"
            }
        ],
        "description": "Conditionally instantiates and renders either the body or the components in the else attribute."
    },
    "wave:update": {
        "type": "event",
        "namespace": "wave",
        "attributes": [
            {
                "name": "id",
                "type": "string",
                "description": "The identifier for the Wave asset, in the form of a standard 18-character ID.",
                "access": "global",
                "parent": "wave:update"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The JSON representing the filter or selection to be applied to the asset.",
                "access": "global",
                "parent": "wave:update"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of the Wave asset. Currently, only dashboard is supported.",
                "access": "global",
                "parent": "wave:update"
            },
            {
                "name": "devName",
                "type": "string",
                "description": "The dev name for the Wave Asset.",
                "access": "global",
                "parent": "wave:update"
            }
        ],
        "description": "Event that updates the Wave asset with the specified filter or selection."
    },
    "force:canvasApp": {
        "type": "component",
        "namespace": "force",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "developerName",
                "type": "string",
                "description": "API name of the canvas app. This name is defined when the canvas app is created and can be viewed in the Canvas App Previewer. Either developerName or referenceId is required.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "applicationName",
                "type": "string",
                "description": "Name or label of the canvas app. Used to display the app's name while Canvas is loading.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "namespacePrefix",
                "type": "string",
                "description": "Namespace value of the Developer Edition organization in which the canvas app was created. Optional if the canvas app wasn’t created in a Developer Edition organization. If not specified, defaults to null.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "parameters",
                "type": "string",
                "description": "Object representation of parameters passed to the canvas app. This should be supplied in JSON format or as a JavaScript object literal. Here’s an example of parameters in a JavaScript object literal: {param1:'value1',param2:'value2'}. If not specified, defaults to null.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "border",
                "type": "string",
                "description": "Width of the canvas app border, in pixels. If not specified, defaults to 0 px.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "width",
                "type": "string",
                "description": "Canvas app window width, in pixels. If not specified, defaults to 800 px.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "height",
                "type": "string",
                "description": "Canvas app window height, in pixels. If not specified, defaults to 900 px.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "maxWidth",
                "type": "string",
                "description": "The maximum width of the Canvas app window in pixels. Defaults to 1000 px; 'infinite' is also a valid value.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "maxHeight",
                "type": "string",
                "description": "The maximum height of the Canvas app window in pixels. Defaults to 2000 px; 'infinite' is also a valid value.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "scrolling",
                "type": "string",
                "description": "Canvas window scrolling",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "canvasId",
                "type": "string",
                "description": "An unique label within a page for the Canvas app window. This should be used when targeting events to this canvas app.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "containerId",
                "type": "string",
                "description": "An html element id in which canvas app is rendered. The container needs to be defined before canvasApp cmp usage.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "onCanvasAppLoad",
                "type": "string",
                "description": "Name of the JavaScript function to be called after the canvas app loads.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "onCanvasSubscribed",
                "type": "string",
                "description": "Name of the JavaScript function to be called after the canvas app registers with the parent.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "onCanvasAppError",
                "type": "string",
                "description": "Name of the JavaScript function to be called if the canvas app fails to render.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "displayLocation",
                "type": "string",
                "description": "The location in the application where the canvas app is currently being called from.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "sublocation",
                "type": "string",
                "description": "The sublocation is the location in the application where the canvas app is currently being called from, for ex, displayLocation can be PageLayout and sublocation can be S1MobileCardPreview or S1MobileCardFullview, etc",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "referenceId",
                "type": "string",
                "description": "The referenceId attribute is deprecated. Use developerName instead.",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "watermark",
                "type": "boolean",
                "description": "Renders a link if set to true",
                "access": "global",
                "parent": "force:canvasApp"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Title for the link",
                "access": "global",
                "parent": "force:canvasApp"
            }
        ],
        "description": "Enables you to include a Force.com Canvas app in a Lightning component."
    },
    "lightning:menuItem": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "string",
                "description": "A value associated with the menu item.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The name of an icon to display after the text of the menu item.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text of the menu item.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "checked",
                "type": "boolean",
                "description": "If not specified, the menu item is not checkable. If true, a check mark is shown to the left of the menu item. If false, a check mark is not shown but there is space to accommodate one.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "If true, the menu item is not actionable and is shown as disabled.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "onactive",
                "type": "action",
                "description": "DEPRECATED. The action triggered when this menu item is selected.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "isDraft",
                "type": "boolean",
                "description": "If true, the menu item shows a draft indicator. This value defaults to false.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "draftAlternativeText",
                "type": "string",
                "description": "Describes the reason for showing the draft indicator. This is required when the isDraft attribute is true",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "prefixIconName",
                "type": "string",
                "description": "The name of an icon to display before the text of the menu item.",
                "access": "global",
                "parent": "lightning:menuItem"
            },
            {
                "name": "href",
                "type": "string",
                "description": "URL for a link to use for the menu item.",
                "access": "global",
                "parent": "lightning:menuItem"
            }
        ],
        "description": "Represents a list item in a menu."
    },
    "lightning:recordEditForm": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The ID of the record to be displayed.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "objectApiName",
                "type": "string",
                "description": "The API name of the object.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "recordTypeId",
                "type": "string",
                "description": "The ID of the record type, which is required if you created multiple record types but don't have a default.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "onload",
                "type": "action",
                "description": "The action triggered when the form data is loaded.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "onsubmit",
                "type": "action",
                "description": "The action triggered when the form is submitted.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "onsuccess",
                "type": "action",
                "description": "The action triggered when the form is saved.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            },
            {
                "name": "onerror",
                "type": "action",
                "description": "The action triggered when there is an error on form submission.",
                "access": "global",
                "parent": "lightning:recordEditForm"
            }
        ],
        "description": "Represents a record edit layout that displays one or more fields, provided by lightning:outputField. This component requires API version 41.0 and later."
    },
    "lightning:textarea": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "name",
                "type": "string",
                "description": "Specifies the name of an input element.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value of the textarea, also used as the default value during init.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of an input field. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies that an input element should be disabled. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "readonly",
                "type": "boolean",
                "description": "Specifies that an input field is read-only. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "required",
                "type": "boolean",
                "description": "Specifies that an input field must be filled out before submitting the form. This value defaults to false.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "validity",
                "type": "object",
                "description": "Represents the validity states that an element can be in, with respect to constraint validation.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "onchange",
                "type": "action",
                "description": "The action triggered when a value attribute changes.",
                "access": "global",
                "parent": "lightning:inputable"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Text that describes the desired textarea input.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "placeholder",
                "type": "string",
                "description": "Text that is displayed when the field is empty, to prompt the user for a valid entry.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "maxlength",
                "type": "integer",
                "description": "The maximum number of characters allowed in the textarea.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "minlength",
                "type": "integer",
                "description": "The minimum number of characters allowed in the textarea.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "messageWhenBadInput",
                "type": "string",
                "description": "Error message to be displayed when a bad input is detected.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Error message to be displayed when the value is missing.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "messageWhenTooLong",
                "type": "string",
                "description": "Error message to be displayed when the value is too long.",
                "access": "global",
                "parent": "lightning:textarea"
            },
            {
                "name": "messageWhenTooShort",
                "type": "string",
                "description": "Error message to be displayed when the value is too short.",
                "access": "global",
                "parent": "lightning:textarea"
            }
        ],
        "description": "Represents a multiline text input."
    },
    "ltng:require": {
        "type": "component",
        "namespace": "ltng",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "styles",
                "type": "string[]",
                "description": "The set of style sheets in dependency order that will be loaded.",
                "access": "global",
                "parent": "ltng:require"
            },
            {
                "name": "scripts",
                "type": "string[]",
                "description": "The set of scripts in dependency order that will be loaded.",
                "access": "global",
                "parent": "ltng:require"
            }
        ],
        "description": "Loads scripts and stylesheets while maintaining dependency order. The styles are loaded in the order that they are listed. The styles only load once if they are specified in multiple <ltng:require> tags in the same component or across different components."
    },
    "aura:iteration": {
        "type": "component",
        "namespace": "aura",
        "attributes": [
            {
                "name": "items",
                "type": "list",
                "description": "The collection of data to iterate over",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "var",
                "type": "string",
                "description": "The name of the variable to use for each item inside the iteration",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "indexVar",
                "type": "string",
                "description": "The name of variable to use for the index of each item inside the iteration",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "start",
                "type": "integer",
                "description": "The index of the collection to start at (inclusive)",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "end",
                "type": "integer",
                "description": "The index of the collection to stop at (exclusive)",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "loaded",
                "type": "boolean",
                "description": "True if the iteration has finished loading the set of templates.",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "body",
                "type": "componentdefref[]",
                "description": "Template to use when creating components for each iteration.",
                "access": "global",
                "parent": "aura:iteration"
            },
            {
                "name": "template",
                "type": "componentdefref[]",
                "description": "The template that is used to generate components. By default, this is set from the body markup on first load.",
                "access": "global",
                "parent": "aura:iteration"
            }
        ],
        "description": "Renders a view of a collection of items. Supports iterations containing components that can be created exclusively on the client-side."
    },
    "lightning:flexipageRegionInfo": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "width",
                "type": "string",
                "description": "The width of the region that the component resides in.",
                "access": "global",
                "parent": "lightning:flexipageRegionInfo"
            }
        ],
        "description": "Provides Lightning page region information to the component that contains it."
    },
    "ltng:selectSObject": {
        "type": "event",
        "namespace": "ltng",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "The record ID associated with the record to select.",
                "access": "global",
                "parent": "ltng:selectSObject"
            },
            {
                "name": "channel",
                "type": "string",
                "description": "Represents the channel name. Specify this attribute if you want particular components to process some event messages while ignoring others.",
                "access": "global",
                "parent": "ltng:selectSObject"
            }
        ],
        "description": "Sends recordId when an object was selected in the UI"
    },
    "ui:outputText": {
        "type": "component",
        "namespace": "ui",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component.",
                "access": "global",
                "parent": "ui:visible"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The text displayed when this component is rendered.",
                "access": "global",
                "parent": "ui:outputText"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays extra information as hover text.",
                "access": "global",
                "parent": "ui:outputText"
            }
        ],
        "description": "Displays text as specified by the value attribute."
    },
    "wave:sdk": {
        "type": "component",
        "namespace": "wave",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": null
    },
    "force:recordData": {
        "type": "component",
        "namespace": "force",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "recordId",
                "type": "string",
                "description": "The record Id",
                "access": "global",
                "parent": "force:hasRecordId"
            },
            {
                "name": "targetFields",
                "type": "object",
                "description": "A simplified view of the fields in targetRecord, to reference record fields in component markup.",
                "access": "global",
                "parent": "force:recordProvider"
            },
            {
                "name": "targetRecord",
                "type": "object",
                "description": "The provided record. This attribute will contain only the fields relevant to the requested layoutType and/or fields atributes.",
                "access": "global",
                "parent": "force:recordProvider"
            },
            {
                "name": "targetError",
                "type": "string",
                "description": "Will be set to the localized error message if the record can't be provided.",
                "access": "global",
                "parent": "force:recordProvider"
            },
            {
                "name": "layoutType",
                "type": "string",
                "description": "Name of the layout to query, which determines the fields included. Valid values are FULL or COMPACT. The layoutType and/or fields attribute must be specified.",
                "access": "global",
                "parent": "force:recordProviderInput"
            },
            {
                "name": "fields",
                "type": "string[]",
                "description": "Specifies which of the record's fields to query.",
                "access": "global",
                "parent": "force:recordProviderInput"
            },
            {
                "name": "mode",
                "type": "string",
                "description": "The mode in which to load the record: VIEW (default) or EDIT.",
                "access": "global",
                "parent": "force:recordProviderInput"
            }
        ],
        "description": "Provides the ability to create, read, update, and delete Salesforce records in Lightning."
    },
    "forceCommunity:routeLink": {
        "type": "component",
        "namespace": "forceCommunity",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "id",
                "type": "string",
                "description": "The ID of the anchor tag.",
                "access": "global",
                "parent": "forceCommunity:routeLink"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the anchor tag.",
                "access": "global",
                "parent": "forceCommunity:routeLink"
            },
            {
                "name": "title",
                "type": "string",
                "description": "The text to display for the link tooltip.",
                "access": "global",
                "parent": "forceCommunity:routeLink"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text displayed in the link.",
                "access": "global",
                "parent": "forceCommunity:routeLink"
            },
            {
                "name": "routeInput",
                "type": "map",
                "description": "The map of dynamic parameters that create the link. Only recordId-based routes are supported.",
                "access": "global",
                "parent": "forceCommunity:routeLink"
            },
            {
                "name": "onClick",
                "type": "action",
                "description": "Action to trigger when the anchor is clicked.",
                "access": "global",
                "parent": "forceCommunity:routeLink"
            }
        ],
        "description": "Sets an HTML anchor tag with an href attribute that’s automatically generated from the provided record ID. Use it to improve SEO link equity in template-based communities."
    },
    "lightning:recordHomeTemplate": {
        "type": "interface",
        "namespace": "lightning",
        "attributes": [],
        "description": "Indicates the component can be used as a flexipage page template for the RECORD_PAGE page type"
    },
    "ui:menuFocusChange": {
        "type": "event",
        "namespace": "ui",
        "attributes": [
            {
                "name": "previousItem",
                "type": "component[]",
                "description": "The menu item that's previously focused.",
                "access": "global",
                "parent": "ui:menuFocusChange"
            },
            {
                "name": "currentItem",
                "type": "component[]",
                "description": "The menu item that's currently focused.",
                "access": "global",
                "parent": "ui:menuFocusChange"
            }
        ],
        "description": "Indicates that menu item focus is changed inside a menu component."
    },
    "lightning:insertImageButton": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "Button to insert an inline image in lightning:inputRichText. This component requires API version 43.0 and later."
    },
    "clients:availableForMailAppAppPage": {
        "type": "interface",
        "namespace": "clients",
        "attributes": [],
        "description": "Marker Interface that allows components to show up in the Lightning for Gmail or Lightning For Outlook Flexipages"
    },
    "lightning:icon": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.",
                "access": "global",
                "parent": "lightning:icon"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size of the icon. Options include xx-small, x-small, small, medium, or large. This value defaults to medium.",
                "access": "global",
                "parent": "lightning:icon"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of a utility icon. Accepted variants include inverse, warning, and error. Use the inverse variant to implement a white fill in utility icons on dark backgrounds.",
                "access": "global",
                "parent": "lightning:icon"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.",
                "access": "global",
                "parent": "lightning:icon"
            },
            {
                "name": "src",
                "type": "string",
                "description": "A uri path to a custom svg sprite, including the name of the resouce, for example: /assets/icons/standard-sprite/svg/test.svg#icon-heart",
                "access": "global",
                "parent": "lightning:icon"
            }
        ],
        "description": "Represents a visual element that provides context and enhances usability."
    },
    "ui:clearErrors": {
        "type": "event",
        "namespace": "ui",
        "attributes": [],
        "description": "Indicates that validation errors are cleared."
    },
    "force:hasSObjectName": {
        "type": "interface",
        "namespace": "force",
        "attributes": [
            {
                "name": "sObjectName",
                "type": "string",
                "description": "sObject name",
                "access": "global",
                "parent": "force:hasSObjectName"
            }
        ],
        "description": "This interface is used to indicate that a component has SObject name attribute"
    },
    "lightning:unsavedChanges": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "label",
                "type": "string",
                "description": "Label for the unsaved content which appears in prompt for save or discard",
                "access": "global",
                "parent": "lightning:unsavedChanges"
            },
            {
                "name": "onsave",
                "type": "action",
                "description": "Action to handle saving unsaved content",
                "access": "global",
                "parent": "lightning:unsavedChanges"
            },
            {
                "name": "ondiscard",
                "type": "action",
                "description": "Action to handle discarding unsaved content",
                "access": "global",
                "parent": "lightning:unsavedChanges"
            }
        ],
        "description": "A component that can be used to notify the UI containment hierarchy of unsaved changes"
    },
    "lightning:buttonIconStateful": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "accesskey",
                "type": "string",
                "description": "Specifies a shortcut key to activate or focus an element.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "tabindex",
                "type": "integer",
                "description": "Specifies the tab order of an element (when the tab button is used for navigating).",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the element receives focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the element releases focus.",
                "access": "global",
                "parent": "lightning:focusable"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "name",
                "type": "string",
                "description": "The name for the button element. This value is optional and can be used to identify the button in a callback.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "value",
                "type": "string",
                "description": "The value for the button element. This value is optional and can be used when submitting a form.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "iconName",
                "type": "string",
                "description": "The Lightning Design System name of the icon. Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed. Note: Only utility icons can be used in this component.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of buttonIcon. Accepted variants include border, border-filled, and border-inverse. This value defaults to border.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size of the buttonIcon. Options include xx-small, x-small, small, and medium. This value defaults to medium.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. This value defaults to false.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "alternativeText",
                "type": "string",
                "description": "The alternative text used to describe the icon. This text should describe what happens when you click the button, for example 'Upload File', not what the icon looks like, 'Paperclip'.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "onclick",
                "type": "action",
                "description": "The action that will be run when the button is clicked.",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            },
            {
                "name": "selected",
                "type": "boolean",
                "description": "Specifies whether button is in selected state or not",
                "access": "global",
                "parent": "lightning:buttonIconStateful"
            }
        ],
        "description": "An icon-only button that retains state. This component requires API version 41.0 and later."
    },
    "lightning:tabFocused": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "previousTabId",
                "type": "string",
                "description": "The previously focused tab ID.",
                "access": "global",
                "parent": "lightning:tabFocused"
            },
            {
                "name": "currentTabId",
                "type": "string",
                "description": "The currently focused tab ID.",
                "access": "global",
                "parent": "lightning:tabFocused"
            }
        ],
        "description": "Fires when a Console workspace or subtab is focused."
    },
    "ui:validationError": {
        "type": "event",
        "namespace": "ui",
        "attributes": [],
        "description": "Indicates that the component has validation error(s)."
    },
    "lightning:utilityBarAPI": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            }
        ],
        "description": "The public API for the Utility Bar."
    },
    "lightning:tabCreated": {
        "type": "event",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "tabId",
                "type": "string",
                "description": "The newly created tab ID.",
                "access": "global",
                "parent": "lightning:tabCreated"
            }
        ],
        "description": "Fires when a Console workspace or subtab has been successfully created."
    },
    "force:hasRecordId": {
        "type": "interface",
        "namespace": "force",
        "attributes": [
            {
                "name": "recordId",
                "type": "string",
                "description": "The record Id",
                "access": "global",
                "parent": "force:hasRecordId"
            }
        ],
        "description": "This interface is used to indicate that a component takes a record (SObject) as an attribute."
    },
    "lightning:slider": {
        "type": "component",
        "namespace": "lightning",
        "attributes": [
            {
                "name": "body",
                "type": "component[]",
                "description": "The body of the component. In markup, this is everything in the body of the tag.",
                "access": "global",
                "parent": "aura:component"
            },
            {
                "name": "class",
                "type": "string",
                "description": "A CSS class for the outer element, in addition to the component's base classes.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "title",
                "type": "string",
                "description": "Displays tooltip text when the mouse moves over the element.",
                "access": "global",
                "parent": "lightning:common"
            },
            {
                "name": "value",
                "type": "integer",
                "description": "The numerical value of the input range. This value defaults to 0.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "onchange",
                "type": "string",
                "description": "The action triggered when the slider value changes. You must pass any newly selected value back to the slider component to bind the new value to the slider.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "min",
                "type": "integer",
                "description": "The min value of the input range. This value defaults to 0.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "max",
                "type": "integer",
                "description": "The max value of the input range. This value defaults to 100.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "step",
                "type": "string",
                "description": "The step increment value of the input range. Example steps include 0.1, 1, or 10. This value defaults to 1.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "size",
                "type": "string",
                "description": "The size value of the input range. This value default to empty, which is the base. Supports x-small, small, medium, and large.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "type",
                "type": "string",
                "description": "The type of the input range position. This value defaults to horizontal.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "label",
                "type": "string",
                "description": "The text label for the input range. Provide your own label to describe the slider. Otherwise, no label is displayed.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "description": "The disabled value of the input range. This value default to false.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "variant",
                "type": "string",
                "description": "The variant changes the appearance of the slider. Accepted variants include standard and label-hidden. This value defaults to standard.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenBadInput",
                "type": "string",
                "description": "Error message to be displayed when a bad input is detected.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenPatternMismatch",
                "type": "string",
                "description": "Error message to be displayed when a pattern mismatch is detected.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenTypeMismatch",
                "type": "string",
                "description": "Error message to be displayed when a type mismatch is detected.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenValueMissing",
                "type": "string",
                "description": "Error message to be displayed when the value is missing.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenRangeOverflow",
                "type": "string",
                "description": "Error message to be displayed when a range overflow is detected.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenRangeUnderflow",
                "type": "string",
                "description": "Error message to be displayed when a range underflow is detected.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenStepMismatch",
                "type": "string",
                "description": "Error message to be displayed when a step mismatch is detected.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "messageWhenTooLong",
                "type": "string",
                "description": "Error message to be displayed when the value is too long.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "onblur",
                "type": "action",
                "description": "The action triggered when the slider releases focus.",
                "access": "global",
                "parent": "lightning:slider"
            },
            {
                "name": "onfocus",
                "type": "action",
                "description": "The action triggered when the slider receives focus.",
                "access": "global",
                "parent": "lightning:slider"
            }
        ],
        "description": "An input range slider for specifying a value between two specified numbers. This component requires API version 41.0 and later."
    }
}